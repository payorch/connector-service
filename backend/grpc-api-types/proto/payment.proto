syntax = "proto3";

package ucs.payments;

service PaymentService {
  rpc PaymentAuthorize(PaymentsAuthorizeRequest) returns (PaymentsAuthorizeResponse);
  rpc PaymentSync(PaymentsSyncRequest) returns (PaymentsSyncResponse);
  rpc RefundSync(RefundsSyncRequest) returns (RefundsSyncResponse);
  rpc IncomingWebhook(IncomingWebhookRequest) returns (IncomingWebhookResponse);
  rpc Refund(RefundsRequest) returns (RefundsResponse);
  rpc PaymentCapture(PaymentsCaptureRequest) returns (PaymentsCaptureResponse);
}

message PaymentsAuthorizeRequest {
  int64 amount = 10;
  Currency currency = 15;
  AuthType auth_creds = 34;
  PaymentMethod payment_method = 2;
  PaymentMethodData payment_method_data = 14;
  optional string connector_customer = 1;
  PaymentAddress address = 3;
AuthenticationType auth_type = 4;
  optional bytes connector_meta_data = 5;
  optional AccessToken access_token = 6;
  optional string session_token = 7;
  optional PaymentMethodToken payment_method_token = 8;
  string connector_request_reference_id = 9;
  optional int64 order_tax_amount = 11;
  optional string email = 12;
  optional string customer_name = 13;
  optional CaptureMethod capture_method = 16;
  optional string return_url = 17;
  optional string webhook_url = 18;
  optional string complete_authorize_url = 19;
  optional FutureUsage setup_future_usage = 20;
  optional bool off_session = 21;
  optional CustomerAcceptance customer_acceptance = 22;
  optional BrowserInformation browser_info = 23;
  optional string order_category = 24;
  bool enrolled_for_3ds = 25;
  optional PaymentExperience payment_experience = 26;
  optional PaymentMethodType payment_method_type = 27;
  bool request_incremental_authorization = 28;
  optional AuthenticationData authentication_data = 29;
  optional bool request_extended_authorization = 30;
  int64 minor_amount = 31;
  optional string merchant_order_reference_id = 32;
  optional int64 shipping_cost = 33;
}

message PaymentsAuthorizeResponse {
  ResponseId resource_id = 1;
  optional RedirectForm redirection_data = 2;
  optional MandateReference mandate_reference = 4;
  optional string network_txn_id = 5;
  optional string connector_response_reference_id = 6;
  optional bool incremental_authorization_allowed = 7;
  AttemptStatus status = 8;
  optional string error_code = 9;
  optional string error_message = 10;
}

message PaymentsSyncRequest {
  AuthType auth_creds = 34;
  string resource_id = 1;
  optional string connector_request_reference_id = 2;
}

message PaymentsSyncResponse {
  ResponseId resource_id = 1;
  AttemptStatus status = 2;
  optional MandateReference mandate_reference = 3;
  optional string network_txn_id = 4;
  optional string connector_response_reference_id = 5;
  optional string error_code = 9;
  optional string error_message = 10;
}

message RefundsSyncRequest {
  AuthType auth_creds = 34;
  string connector_refund_id = 2;
  string connector_transaction_id = 1;
  optional string refund_reason = 3;
}

message RefundsSyncResponse {
  optional string connector_refund_id = 1;
  RefundStatus status = 2;
  optional string connector_response_reference_id = 5;
  optional string error_code = 9;
  optional string error_message = 10;
}

message IncomingWebhookRequest {
  RequestDetails request_details = 2;
  optional ConnectorWebhookSecrets webhook_secrets = 3;
  optional AuthType auth_creds = 34;
}

message IncomingWebhookResponse {
  EventType event_type = 1;
  WebhookResponseContent content = 2;
  bool source_verified = 3;
}

enum EventType {
  PAYMENT = 0;
  REFUND = 1;
}

message WebhookResponseContent {
  oneof content {
    PaymentsSyncResponse payments_response = 1;
    RefundsSyncResponse refunds_response = 2;
  }
}

message RequestDetails {
  Method method = 1;
  optional string uri = 2;
  map<string, string> headers = 3;
  bytes body = 4;
  optional string query_params = 5;
}

message ConnectorWebhookSecrets {
  string secret = 1;
  optional string additional_secret = 2;
}

message RefundsRequest {
  string refund_id = 1;
  AuthType auth_creds = 34;
  string connector_transaction_id = 2;
  optional string connector_refund_id = 3;
  Currency currency = 15;
  int64 payment_amount = 4;
  optional string reason = 5;
  optional string webhook_url = 6;
  int64 refund_amount = 7;
  optional bytes connector_metadata = 8;
  optional bytes refund_connector_metadata = 9;
  optional BrowserInformation browser_info = 23;
  int64 minor_payment_amount = 10;
  int64 minor_refund_amount = 11;
  optional string merchant_account_id = 12;
  optional CaptureMethod capture_method = 16;
}

message RefundsResponse {
  optional string connector_refund_id = 1;
  RefundStatus refund_status = 36;
  optional string error_code = 2;
  optional string error_message = 3;
}

// Add these new message and enum types
message AuthType {
  oneof auth_details {
    HeaderKey header_key = 1;
    BodyKey body_key = 2;
    SignatureKey signature_key = 3;
    MultiAuthKey multi_auth_key = 4;
    CertificateAuth certificate_auth = 5;
    bool no_key = 6; // Using bool as a presence indicator for NoKey
  }
}

message HeaderKey {
  string api_key = 1;
}

message BodyKey {
  string api_key = 1;
  string key1 = 2;
}

message SignatureKey {
  string api_key = 1;
  string key1 = 2;
  string api_secret = 3;
}

message MultiAuthKey {
  string api_key = 1;
  string key1 = 2;
  string api_secret = 3;
  string key2 = 4;
}

message CertificateAuth {
  string certificate = 1;
  string private_key = 2;
}

enum Connector {
  ADYENPLATFORM = 0;
  ACI = 1;
  ADYEN = 2;
  AIRWALLEX = 3;
  AUTHORIZEDOTNET = 4;
  BAMBORA = 5;
  BAMBORAAPAC = 6;
  BANKOFAMERICA = 7;
  BILLWERK = 8;
  BITPAY = 9;
  BLUESNAP = 10;
  BOKU = 11;
  BRAINTREE = 12;
  CASHTOCODE = 13;
  CHARGEBEE = 14;
  CHECKOUT = 15;
  COINBASE = 16;
  COINGATE = 17;
  CRYPTOPAY = 18;
  CTP_MASTERCARD = 19;
  CTP_VISA = 20;
  CYBERSOURCE = 21;
  DATATRANS = 22;
  DEUTSCHEBANK = 23;
  DIGITALVIRGO = 24;
  DLOCAL = 25;
  EBANX = 26;
  ELAVON = 27;
  FISERV = 28;
  FISERVEMEA = 29;
  FIUU = 30;
  FORTE = 31;
  GETNET = 32;
  GLOBALPAY = 33;
  GLOBEPAY = 34;
  GOCARDLESS = 35;
  GPAYMENTS = 36;
  HIPAY = 37;
  HELCIM = 38;
  INESPAY = 39;
  IATAPAY = 40;
  ITAUBANK = 41;
  JPMORGAN = 42;
  JUSPAYTHREEDSSERVER = 43;
  KLARNA = 44;
  MIFINITY = 45;
  MOLLIE = 46;
  MONERIS = 47;
  MULTISAFEPAY = 48;
  NETCETERA = 49;
  NEXINETS = 50;
  NEXIXPAY = 51;
  NMI = 52;
  NOMUPAY = 53;
  NOON = 54;
  NOVALNET = 55;
  NUVEI = 56;
  OPENNODE = 57;
  PAYBOX = 58;
  PAYME = 59;
  PAYONE = 60;
  PAYPAL = 61;
  PAYSTACK = 62;
  PAYU = 63;
  PLACETOPAY = 64;
  POWERTRANZ = 65;
  PROPHETPAY = 66;
  RAPYD = 67;
  RAZORPAY = 68;
  RECURLY = 69;
  REDSYS = 70;
  SHIFT4 = 71;
  SQUARE = 72;
  STAX = 73;
  STRIPE = 74;
  TAXJAR = 75;
  THREEDSECUREIO = 76;
  TRUSTPAY = 77;
  TSYS = 78;
  VOLT = 79;
  WELLSFARGO = 80;
  WISE = 81;
  WORLDLINE = 82;
  WORLDPAY = 83;
  SIGNIFYD = 84;
  PLAID = 85;
  RISKIFIED = 86;
  XENDIT = 87;
  ZEN = 88;
  ZSL = 89;
}

message ResponseId {
  oneof id {
    string connector_transaction_id = 1;
    string encoded_data = 2;
    bool no_response_id = 3; // Using bool as a presence indicator for NoResponseId
  }
}

message RedirectForm {
  oneof form_type {
    FormData form = 1;
    HtmlData html = 2;
  }
}

message FormData {
  string endpoint = 1;
  Method method = 2;
  map<string, string> form_fields = 3;
}

message HtmlData {
  string html_data = 1;
}

enum Method {
  GET = 0;
  POST = 1;
  // Add other HTTP methods as needed
}

message MandateReference {
  optional string connector_mandate_id = 1;
}

enum Currency {
  AED = 0;
  AFN = 1;
  ALL = 2;
  AMD = 3;
  ANG = 4;
  AOA = 5;
  ARS = 6;
  AUD = 7;
  AWG = 8;
  AZN = 9;
  BAM = 10;
  BBD = 11;
  BDT = 12;
  BGN = 13;
  BHD = 14;
  BIF = 15;
  BMD = 16;
  BND = 17;
  BOB = 18;
  BRL = 19;
  BSD = 20;
  BTN = 21;
  BWP = 22;
  BYN = 23;
  BZD = 24;
  CAD = 25;
  CDF = 26;
  CHF = 27;
  CLF = 28;
  CLP = 29;
  CNY = 30;
  COP = 31;
  CRC = 32;
  CUC = 33;
  CUP = 34;
  CVE = 35;
  CZK = 36;
  DJF = 37;
  DKK = 38;
  DOP = 39;
  DZD = 40;
  EGP = 41;
  ERN = 42;
  ETB = 43;
  EUR = 44;
  FJD = 45;
  FKP = 46;
  GBP = 47;
  GEL = 48;
  GHS = 49;
  GIP = 50;
  GMD = 51;
  GNF = 52;
  GTQ = 53;
  GYD = 54;
  HKD = 55;
  HNL = 56;
  HRK = 57;
  HTG = 58;
  HUF = 59;
  IDR = 60;
  ILS = 61;
  INR = 62;
  IQD = 63;
  IRR = 64;
  ISK = 65;
  JMD = 66;
  JOD = 67;
  JPY = 68;
  KES = 69;
  KGS = 70;
  KHR = 71;
  KMF = 72;
  KPW = 73;
  KRW = 74;
  KWD = 75;
  KYD = 76;
  KZT = 77;
  LAK = 78;
  LBP = 79;
  LKR = 80;
  LRD = 81;
  LSL = 82;
  LYD = 83;
  MAD = 84;
  MDL = 85;
  MGA = 86;
  MKD = 87;
  MMK = 88;
  MNT = 89;
  MOP = 90;
  MRU = 91;
  MUR = 92;
  MVR = 93;
  MWK = 94;
  MXN = 95;
  MYR = 96;
  MZN = 97;
  NAD = 98;
  NGN = 99;
  NIO = 100;
  NOK = 101;
  NPR = 102;
  NZD = 103;
  OMR = 104;
  PAB = 105;
  PEN = 106;
  PGK = 107;
  PHP = 108;
  PKR = 109;
  PLN = 110;
  PYG = 111;
  QAR = 112;
  RON = 113;
  RSD = 114;
  RUB = 115;
  RWF = 116;
  SAR = 117;
  SBD = 118;
  SCR = 119;
  SDG = 120;
  SEK = 121;
  SGD = 122;
  SHP = 123;
  SLE = 124;
  SLL = 125;
  SOS = 126;
  SRD = 127;
  SSP = 128;
  STD = 129;
  STN = 130;
  SVC = 131;
  SYP = 132;
  SZL = 133;
  THB = 134;
  TJS = 135;
  TMT = 136;
  TND = 137;
  TOP = 138;
  TRY = 139;
  TTD = 140;
  TWD = 141;
  TZS = 142;
  UAH = 143;
  UGX = 144;
  USD = 145;
  UYU = 146;
  UZS = 147;
  VES = 148;
  VND = 149;
  VUV = 150;
  WST = 151;
  XAF = 152;
  XCD = 153;
  XOF = 154;
  XPF = 155;
  YER = 156;
  ZAR = 157;
  ZMW = 158;
  ZWL = 159;
}

enum CaptureMethod {
  AUTOMATIC = 0;
  MANUAL = 1;
  MANUAL_MULTIPLE = 2;
  SCHEDULED = 3;
  SEQUENTIAL_AUTOMATIC = 4;
}

enum FutureUsage {
  OFF_SESSION = 0;
  ON_SESSION = 1;
}

message CustomerAcceptance {
  AcceptanceType acceptance_type = 1;
  string accepted_at = 2; // ISO8601 formatted string
  optional OnlineMandate online = 3;
}

enum AcceptanceType {
  ONLINE = 0;
  OFFLINE = 1;
}

message BrowserInformation {
  optional uint32 color_depth = 1;
  optional bool java_enabled = 2;
  optional bool java_script_enabled = 3;
  optional string language = 4;
  optional uint32 screen_height = 5;
  optional uint32 screen_width = 6;
  optional int32 time_zone = 7;
  optional string ip_address = 8; // Using string for IP address
  optional string accept_header = 9;
  optional string user_agent = 10;
  optional string os_type = 11;
  optional string os_version = 12;
  optional string device_model = 13;
  optional string accept_language = 14;
}

enum PaymentExperience {
  REDIRECT_TO_URL = 0;
  INVOKE_SDK_CLIENT = 1;
  DISPLAY_QR_CODE = 2;
  ONE_CLICK = 3;
  LINK_WALLET = 4;
  INVOKE_PAYMENT_APP = 5;
  DISPLAY_WAIT_SCREEN = 6;
  COLLECT_OTP = 7;
}

enum PaymentMethodType {
  ACH = 0;
  AFFIRM = 1;
  AFTERPAY_CLEARPAY = 2;
  ALFAMART = 3;
  ALI_PAY = 4;
  ALI_PAY_HK = 5;
  ALMA = 6;
  AMAZON_PAY = 7;
  APPLE_PAY = 8;
  ATOME = 9;
  BACS = 10;
  BANCONTACT_CARD = 11;
  BECS = 12;
  BENEFIT = 13;
  BIZUM = 14;
  BLIK = 15;
  BOLETO = 16;
  BCA_BANK_TRANSFER = 17;
  BNI_VA = 18;
  BRI_VA = 19;
  CARD_REDIRECT = 20;
  CIMB_VA = 21;
  CLASSIC_REWARD = 22;
  CREDIT = 23;
  CRYPTO_CURRENCY = 24;
  CASHAPP = 25;
  DANA = 26;
  DANAMON_VA = 27;
  DEBIT = 28;
  DUIT_NOW = 29;
  EFECTY = 30;
  EFT = 31;
  EPS = 32;
  FPS = 33;
  EVOUCHER = 34;
  GIROPAY = 35;
  GIVEX = 36;
  GOOGLE_PAY = 37;
  GO_PAY = 38;
  GCASH = 39;
  IDEAL = 40;
  INTERAC = 41;
  INDOMARET = 42;
  KAKAO_PAY = 44;
  LOCAL_BANK_REDIRECT = 45;
  MANDIRI_VA = 46;
  KNET = 47;
  MB_WAY = 48;
  MOBILE_PAY = 49;
  MOMO = 50;
  MOMO_ATM = 51;
  MULTIBANCO = 52;
  ONLINE_BANKING_THAILAND = 53;
  ONLINE_BANKING_CZECH_REPUBLIC = 54;
  ONLINE_BANKING_FINLAND = 55;
  ONLINE_BANKING_FPX = 56;
  ONLINE_BANKING_POLAND = 57;
  ONLINE_BANKING_SLOVAKIA = 58;
  OXXO = 59;
  PAGO_EFECTIVO = 60;
  PERMATA_BANK_TRANSFER = 61;
  OPEN_BANKING_UK = 62;
  PAY_BRIGHT = 63;
  PAZE = 65;
  PIX = 66;
  PAY_SAFE_CARD = 67;
  PRZELEWY24 = 68;
  PROMPT_PAY = 69;
  PSE = 70;
  RED_COMPRA = 71;
  RED_PAGOS = 72;
  SAMSUNG_PAY = 73;
  SEPA = 74;
  SEPA_BANK_TRANSFER = 75;
  SOFORT = 76;
  SWISH = 77;
  TOUCH_N_GO = 78;
  TRUSTLY = 79;
  TWINT = 80;
  UPI_COLLECT = 81;
  UPI_INTENT = 82;
  VIPPS = 83;
  VIET_QR = 84;
  VENMO = 85;
  WALLEY = 86;
  WE_CHAT_PAY = 87;
  SEVEN_ELEVEN = 88;
  LAWSON = 89;
  MINI_STOP = 90;
  FAMILY_MART = 91;
  SEICOMART = 92;
  PAY_EASY = 93;
  LOCAL_BANK_TRANSFER = 94;
  OPEN_BANKING_PIS = 96;
  DIRECT_CARRIER_BILLING = 97;
  INSTANT_BANK_TRANSFER = 98;
}

message PaymentMethodData {
  oneof data {
    Card card = 1;
  }
}

message Card {
  string card_number = 1;
  string card_exp_month = 2;
  string card_exp_year = 3;
  optional string card_holder_name = 4;
  string card_cvc = 5;
  optional string card_issuer = 6;
  optional CardNetwork card_network = 7;
  optional string card_type = 8;
  optional string card_issuing_country = 9;
  optional string bank_code = 10;
  optional string nick_name = 11;
}

enum CardNetwork {
  VISA = 0;
  MASTERCARD = 1;
  AMERICAN_EXPRESS = 2;
  JCB = 3;
  DINERS_CLUB = 4;
  DISCOVER = 5;
  CARTES_BANCAIRES = 6;
  UNION_PAY = 7;
  RU_PAY = 8;
  MAESTRO = 9;
}

message OnlineMandate {
  optional string ip_address = 1;
  string user_agent = 2;
}

enum AuthenticationType {
  THREE_DS = 0;
  NO_THREE_DS = 1;
}

message PhoneDetails {
  optional string number = 1;
  optional string country_code = 2;
}

message AuthenticationData {
  optional string eci = 1;
  string cavv = 2;
  optional string threeds_server_transaction_id = 3;
  optional string message_version = 4; // Using string for SemanticVersion
  optional string ds_trans_id = 5;
}

enum PaymentMethod {
  CARD = 0;
}

message PaymentAddress {
  optional Address shipping = 1;
  optional Address billing = 2;
  optional Address unified_payment_method_billing = 3;
  optional Address payment_method_billing = 4;
}

// Country Alpha-2 code enumeration
enum CountryAlpha2 {
  // Default value must be first (value 0)
  US = 0;
  
  AF = 1;
  AX = 2;
  AL = 3;
  DZ = 4;
  AS = 5;
  AD = 6;
  AO = 7;
  AI = 8;
  AQ = 9;
  AG = 10;
  AR = 11;
  AM = 12;
  AW = 13;
  AU = 14;
  AT = 15;
  AZ = 16;
  BS = 17;
  BH = 18;
  BD = 19;
  BB = 20;
  BY = 21;
  BE = 22;
  BZ = 23;
  BJ = 24;
  BM = 25;
  BT = 26;
  BO = 27;
  BQ = 28;
  BA = 29;
  BW = 30;
  BV = 31;
  BR = 32;
  IO = 33;
  BN = 34;
  BG = 35;
  BF = 36;
  BI = 37;
  KH = 38;
  CM = 39;
  CA = 40;
  CV = 41;
  KY = 42;
  CF = 43;
  TD = 44;
  CL = 45;
  CN = 46;
  CX = 47;
  CC = 48;
  CO = 49;
  KM = 50;
  CG = 51;
  CD = 52;
  CK = 53;
  CR = 54;
  CI = 55;
  HR = 56;
  CU = 57;
  CW = 58;
  CY = 59;
  CZ = 60;
  DK = 61;
  DJ = 62;
  DM = 63;
  DO = 64;
  EC = 65;
  EG = 66;
  SV = 67;
  GQ = 68;
  ER = 69;
  EE = 70;
  ET = 71;
  FK = 72;
  FO = 73;
  FJ = 74;
  FI = 75;
  FR = 76;
  GF = 77;
  PF = 78;
  TF = 79;
  GA = 80;
  GM = 81;
  GE = 82;
  DE = 83;
  GH = 84;
  GI = 85;
  GR = 86;
  GL = 87;
  GD = 88;
  GP = 89;
  GU = 90;
  GT = 91;
  GG = 92;
  GN = 93;
  GW = 94;
  GY = 95;
  HT = 96;
  HM = 97;
  VA = 98;
  HN = 99;
  HK = 100;
  HU = 101;
  IS = 102;
  IN = 103;
  ID = 104;
  IR = 105;
  IQ = 106;
  IE = 107;
  IM = 108;
  IL = 109;
  IT = 110;
  JM = 111;
  JP = 112;
  JE = 113;
  JO = 114;
  KZ = 115;
  KE = 116;
  KI = 117;
  KP = 118;
  KR = 119;
  KW = 120;
  KG = 121;
  LA = 122;
  LV = 123;
  LB = 124;
  LS = 125;
  LR = 126;
  LY = 127;
  LI = 128;
  LT = 129;
  LU = 130;
  MO = 131;
  MK = 132;
  MG = 133;
  MW = 134;
  MY = 135;
  MV = 136;
  ML = 137;
  MT = 138;
  MH = 139;
  MQ = 140;
  MR = 141;
  MU = 142;
  YT = 143;
  MX = 144;
  FM = 145;
  MD = 146;
  MC = 147;
  MN = 148;
  ME = 149;
  MS = 150;
  MA = 151;
  MZ = 152;
  MM = 153;
  NA = 154;
  NR = 155;
  NP = 156;
  NL = 157;
  NC = 158;
  NZ = 159;
  NI = 160;
  NE = 161;
  NG = 162;
  NU = 163;
  NF = 164;
  MP = 165;
  NO = 166;
  OM = 167;
  PK = 168;
  PW = 169;
  PS = 170;
  PA = 171;
  PG = 172;
  PY = 173;
  PE = 174;
  PH = 175;
  PN = 176;
  PL = 177;
  PT = 178;
  PR = 179;
  QA = 180;
  RE = 181;
  RO = 182;
  RU = 183;
  RW = 184;
  BL = 185;
  SH = 186;
  KN = 187;
  LC = 188;
  MF = 189;
  PM = 190;
  VC = 191;
  WS = 192;
  SM = 193;
  ST = 194;
  SA = 195;
  SN = 196;
  RS = 197;
  SC = 198;
  SL = 199;
  SG = 200;
  SX = 201;
  SK = 202;
  SI = 203;
  SB = 204;
  SO = 205;
  ZA = 206;
  GS = 207;
  SS = 208;
  ES = 209;
  LK = 210;
  SD = 211;
  SR = 212;
  SJ = 213;
  SZ = 214;
  SE = 215;
  CH = 216;
  SY = 217;
  TW = 218;
  TJ = 219;
  TZ = 220;
  TH = 221;
  TL = 222;
  TG = 223;
  TK = 224;
  TO = 225;
  TT = 226;
  TN = 227;
  TR = 228;
  TM = 229;
  TC = 230;
  TV = 231;
  UG = 232;
  UA = 233;
  AE = 234;
  GB = 235;
  UM = 236;
  UY = 237;
  UZ = 238;
  VU = 239;
  VE = 240;
  VN = 241;
  VG = 242;
  VI = 243;
  WF = 244;
  EH = 245;
  YE = 246;
  ZM = 247;
  ZW = 248;
}

message Address {
  optional AddressDetails address = 1;
  optional PhoneDetails phone = 2;
  optional string email = 3; // Using string for Email
}

message AddressDetails {
  optional string city = 1;
  optional CountryAlpha2 country = 2;
  optional string line1 = 3;
  optional string line2 = 4;
  optional string line3 = 5;
  optional string zip = 6;
  optional string state = 7;
  optional string first_name = 8;
  optional string last_name = 9;
}

message AccessToken {
  string token = 1;
  int64 expires = 2;
}

message PaymentMethodToken {
  string token = 1;
}

enum AttemptStatus {
  STARTED = 0;
  AUTHENTICATION_FAILED = 1;
  ROUTER_DECLINED = 2;
  AUTHENTICATION_PENDING = 3;
  AUTHENTICATION_SUCCESSFUL = 4;
  AUTHORIZED = 5;
  AUTHORIZATION_FAILED = 6;
  CHARGED = 7;
  AUTHORIZING = 8;
  COD_INITIATED = 9;
  VOIDED = 10;
  VOID_INITIATED = 11;
  CAPTURE_INITIATED = 12;
  CAPTURE_FAILED = 13;
  VOID_FAILED = 14;
  AUTO_REFUNDED = 15;
  PARTIAL_CHARGED = 16;
  PARTIAL_CHARGED_AND_CHARGEABLE = 17;
  UNRESOLVED = 18;
  PENDING = 19;
  FAILURE = 20;
  PAYMENT_METHOD_AWAITED = 21;
  CONFIRMATION_AWAITED = 22;
  DEVICE_DATA_COLLECTION_PENDING = 23;
}

enum RefundStatus {
  REFUND_FAILURE = 0;
  REFUND_MANUAL_REVIEW = 1;
  REFUND_PENDING = 2;
  REFUND_SUCCESS = 3;
  REFUND_TRANSACTION_FAILURE = 4;
}

message MultipleCaptureRequestData {
    int64 capture_sequence = 2;
    string capture_reference = 4;
}

message PaymentsCaptureRequest {
  string connector_transaction_id = 1;
  AuthType auth_creds = 34;
  int64 amount_to_capture = 2;
  Currency currency = 15;
  optional MultipleCaptureRequestData multiple_capture_data = 21;
  optional bytes connector_meta_data = 3;
}


message PaymentsCaptureResponse {
  ResponseId resource_id = 1;
  optional string connector_response_reference_id = 2;
  AttemptStatus status = 8;
  optional string error_code = 3;
  optional string error_message = 4;
}
