from google.protobuf.internal import containers as _containers
from google.protobuf.internal import enum_type_wrapper as _enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from typing import ClassVar as _ClassVar, Mapping as _Mapping, Optional as _Optional, Union as _Union

DESCRIPTOR: _descriptor.FileDescriptor

class EventType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    PAYMENT: _ClassVar[EventType]
    REFUND: _ClassVar[EventType]

class Connector(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    ADYENPLATFORM: _ClassVar[Connector]
    ACI: _ClassVar[Connector]
    ADYEN: _ClassVar[Connector]
    AIRWALLEX: _ClassVar[Connector]
    AUTHORIZEDOTNET: _ClassVar[Connector]
    BAMBORA: _ClassVar[Connector]
    BAMBORAAPAC: _ClassVar[Connector]
    BANKOFAMERICA: _ClassVar[Connector]
    BILLWERK: _ClassVar[Connector]
    BITPAY: _ClassVar[Connector]
    BLUESNAP: _ClassVar[Connector]
    BOKU: _ClassVar[Connector]
    BRAINTREE: _ClassVar[Connector]
    CASHTOCODE: _ClassVar[Connector]
    CHARGEBEE: _ClassVar[Connector]
    CHECKOUT: _ClassVar[Connector]
    COINBASE: _ClassVar[Connector]
    COINGATE: _ClassVar[Connector]
    CRYPTOPAY: _ClassVar[Connector]
    CTP_MASTERCARD: _ClassVar[Connector]
    CTP_VISA: _ClassVar[Connector]
    CYBERSOURCE: _ClassVar[Connector]
    DATATRANS: _ClassVar[Connector]
    DEUTSCHEBANK: _ClassVar[Connector]
    DIGITALVIRGO: _ClassVar[Connector]
    DLOCAL: _ClassVar[Connector]
    EBANX: _ClassVar[Connector]
    ELAVON: _ClassVar[Connector]
    FISERV: _ClassVar[Connector]
    FISERVEMEA: _ClassVar[Connector]
    FIUU: _ClassVar[Connector]
    FORTE: _ClassVar[Connector]
    GETNET: _ClassVar[Connector]
    GLOBALPAY: _ClassVar[Connector]
    GLOBEPAY: _ClassVar[Connector]
    GOCARDLESS: _ClassVar[Connector]
    GPAYMENTS: _ClassVar[Connector]
    HIPAY: _ClassVar[Connector]
    HELCIM: _ClassVar[Connector]
    INESPAY: _ClassVar[Connector]
    IATAPAY: _ClassVar[Connector]
    ITAUBANK: _ClassVar[Connector]
    JPMORGAN: _ClassVar[Connector]
    JUSPAYTHREEDSSERVER: _ClassVar[Connector]
    KLARNA: _ClassVar[Connector]
    MIFINITY: _ClassVar[Connector]
    MOLLIE: _ClassVar[Connector]
    MONERIS: _ClassVar[Connector]
    MULTISAFEPAY: _ClassVar[Connector]
    NETCETERA: _ClassVar[Connector]
    NEXINETS: _ClassVar[Connector]
    NEXIXPAY: _ClassVar[Connector]
    NMI: _ClassVar[Connector]
    NOMUPAY: _ClassVar[Connector]
    NOON: _ClassVar[Connector]
    NOVALNET: _ClassVar[Connector]
    NUVEI: _ClassVar[Connector]
    OPENNODE: _ClassVar[Connector]
    PAYBOX: _ClassVar[Connector]
    PAYME: _ClassVar[Connector]
    PAYONE: _ClassVar[Connector]
    PAYPAL: _ClassVar[Connector]
    PAYSTACK: _ClassVar[Connector]
    PAYU: _ClassVar[Connector]
    PLACETOPAY: _ClassVar[Connector]
    POWERTRANZ: _ClassVar[Connector]
    PROPHETPAY: _ClassVar[Connector]
    RAPYD: _ClassVar[Connector]
    RAZORPAY: _ClassVar[Connector]
    RECURLY: _ClassVar[Connector]
    REDSYS: _ClassVar[Connector]
    SHIFT4: _ClassVar[Connector]
    SQUARE: _ClassVar[Connector]
    STAX: _ClassVar[Connector]
    STRIPE: _ClassVar[Connector]
    TAXJAR: _ClassVar[Connector]
    THREEDSECUREIO: _ClassVar[Connector]
    TRUSTPAY: _ClassVar[Connector]
    TSYS: _ClassVar[Connector]
    VOLT: _ClassVar[Connector]
    WELLSFARGO: _ClassVar[Connector]
    WISE: _ClassVar[Connector]
    WORLDLINE: _ClassVar[Connector]
    WORLDPAY: _ClassVar[Connector]
    SIGNIFYD: _ClassVar[Connector]
    PLAID: _ClassVar[Connector]
    RISKIFIED: _ClassVar[Connector]
    XENDIT: _ClassVar[Connector]
    ZEN: _ClassVar[Connector]
    ZSL: _ClassVar[Connector]

class Method(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    GET: _ClassVar[Method]
    POST: _ClassVar[Method]

class Currency(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    AED: _ClassVar[Currency]
    AFN: _ClassVar[Currency]
    ALL: _ClassVar[Currency]
    AMD: _ClassVar[Currency]
    ANG: _ClassVar[Currency]
    AOA: _ClassVar[Currency]
    ARS: _ClassVar[Currency]
    AUD: _ClassVar[Currency]
    AWG: _ClassVar[Currency]
    AZN: _ClassVar[Currency]
    BAM: _ClassVar[Currency]
    BBD: _ClassVar[Currency]
    BDT: _ClassVar[Currency]
    BGN: _ClassVar[Currency]
    BHD: _ClassVar[Currency]
    BIF: _ClassVar[Currency]
    BMD: _ClassVar[Currency]
    BND: _ClassVar[Currency]
    BOB: _ClassVar[Currency]
    BRL: _ClassVar[Currency]
    BSD: _ClassVar[Currency]
    BTN: _ClassVar[Currency]
    BWP: _ClassVar[Currency]
    BYN: _ClassVar[Currency]
    BZD: _ClassVar[Currency]
    CAD: _ClassVar[Currency]
    CDF: _ClassVar[Currency]
    CHF: _ClassVar[Currency]
    CLF: _ClassVar[Currency]
    CLP: _ClassVar[Currency]
    CNY: _ClassVar[Currency]
    COP: _ClassVar[Currency]
    CRC: _ClassVar[Currency]
    CUC: _ClassVar[Currency]
    CUP: _ClassVar[Currency]
    CVE: _ClassVar[Currency]
    CZK: _ClassVar[Currency]
    DJF: _ClassVar[Currency]
    DKK: _ClassVar[Currency]
    DOP: _ClassVar[Currency]
    DZD: _ClassVar[Currency]
    EGP: _ClassVar[Currency]
    ERN: _ClassVar[Currency]
    ETB: _ClassVar[Currency]
    EUR: _ClassVar[Currency]
    FJD: _ClassVar[Currency]
    FKP: _ClassVar[Currency]
    GBP: _ClassVar[Currency]
    GEL: _ClassVar[Currency]
    GHS: _ClassVar[Currency]
    GIP: _ClassVar[Currency]
    GMD: _ClassVar[Currency]
    GNF: _ClassVar[Currency]
    GTQ: _ClassVar[Currency]
    GYD: _ClassVar[Currency]
    HKD: _ClassVar[Currency]
    HNL: _ClassVar[Currency]
    HRK: _ClassVar[Currency]
    HTG: _ClassVar[Currency]
    HUF: _ClassVar[Currency]
    IDR: _ClassVar[Currency]
    ILS: _ClassVar[Currency]
    INR: _ClassVar[Currency]
    IQD: _ClassVar[Currency]
    IRR: _ClassVar[Currency]
    ISK: _ClassVar[Currency]
    JMD: _ClassVar[Currency]
    JOD: _ClassVar[Currency]
    JPY: _ClassVar[Currency]
    KES: _ClassVar[Currency]
    KGS: _ClassVar[Currency]
    KHR: _ClassVar[Currency]
    KMF: _ClassVar[Currency]
    KPW: _ClassVar[Currency]
    KRW: _ClassVar[Currency]
    KWD: _ClassVar[Currency]
    KYD: _ClassVar[Currency]
    KZT: _ClassVar[Currency]
    LAK: _ClassVar[Currency]
    LBP: _ClassVar[Currency]
    LKR: _ClassVar[Currency]
    LRD: _ClassVar[Currency]
    LSL: _ClassVar[Currency]
    LYD: _ClassVar[Currency]
    MAD: _ClassVar[Currency]
    MDL: _ClassVar[Currency]
    MGA: _ClassVar[Currency]
    MKD: _ClassVar[Currency]
    MMK: _ClassVar[Currency]
    MNT: _ClassVar[Currency]
    MOP: _ClassVar[Currency]
    MRU: _ClassVar[Currency]
    MUR: _ClassVar[Currency]
    MVR: _ClassVar[Currency]
    MWK: _ClassVar[Currency]
    MXN: _ClassVar[Currency]
    MYR: _ClassVar[Currency]
    MZN: _ClassVar[Currency]
    NAD: _ClassVar[Currency]
    NGN: _ClassVar[Currency]
    NIO: _ClassVar[Currency]
    NOK: _ClassVar[Currency]
    NPR: _ClassVar[Currency]
    NZD: _ClassVar[Currency]
    OMR: _ClassVar[Currency]
    PAB: _ClassVar[Currency]
    PEN: _ClassVar[Currency]
    PGK: _ClassVar[Currency]
    PHP: _ClassVar[Currency]
    PKR: _ClassVar[Currency]
    PLN: _ClassVar[Currency]
    PYG: _ClassVar[Currency]
    QAR: _ClassVar[Currency]
    RON: _ClassVar[Currency]
    RSD: _ClassVar[Currency]
    RUB: _ClassVar[Currency]
    RWF: _ClassVar[Currency]
    SAR: _ClassVar[Currency]
    SBD: _ClassVar[Currency]
    SCR: _ClassVar[Currency]
    SDG: _ClassVar[Currency]
    SEK: _ClassVar[Currency]
    SGD: _ClassVar[Currency]
    SHP: _ClassVar[Currency]
    SLE: _ClassVar[Currency]
    SLL: _ClassVar[Currency]
    SOS: _ClassVar[Currency]
    SRD: _ClassVar[Currency]
    SSP: _ClassVar[Currency]
    STD: _ClassVar[Currency]
    STN: _ClassVar[Currency]
    SVC: _ClassVar[Currency]
    SYP: _ClassVar[Currency]
    SZL: _ClassVar[Currency]
    THB: _ClassVar[Currency]
    TJS: _ClassVar[Currency]
    TMT: _ClassVar[Currency]
    TND: _ClassVar[Currency]
    TOP: _ClassVar[Currency]
    TRY: _ClassVar[Currency]
    TTD: _ClassVar[Currency]
    TWD: _ClassVar[Currency]
    TZS: _ClassVar[Currency]
    UAH: _ClassVar[Currency]
    UGX: _ClassVar[Currency]
    USD: _ClassVar[Currency]
    UYU: _ClassVar[Currency]
    UZS: _ClassVar[Currency]
    VES: _ClassVar[Currency]
    VND: _ClassVar[Currency]
    VUV: _ClassVar[Currency]
    WST: _ClassVar[Currency]
    XAF: _ClassVar[Currency]
    XCD: _ClassVar[Currency]
    XOF: _ClassVar[Currency]
    XPF: _ClassVar[Currency]
    YER: _ClassVar[Currency]
    ZAR: _ClassVar[Currency]
    ZMW: _ClassVar[Currency]
    ZWL: _ClassVar[Currency]

class CaptureMethod(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    AUTOMATIC: _ClassVar[CaptureMethod]
    MANUAL: _ClassVar[CaptureMethod]
    MANUAL_MULTIPLE: _ClassVar[CaptureMethod]
    SCHEDULED: _ClassVar[CaptureMethod]
    SEQUENTIAL_AUTOMATIC: _ClassVar[CaptureMethod]

class FutureUsage(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    OFF_SESSION: _ClassVar[FutureUsage]
    ON_SESSION: _ClassVar[FutureUsage]

class AcceptanceType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    ONLINE: _ClassVar[AcceptanceType]
    OFFLINE: _ClassVar[AcceptanceType]

class PaymentExperience(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    REDIRECT_TO_URL: _ClassVar[PaymentExperience]
    INVOKE_SDK_CLIENT: _ClassVar[PaymentExperience]
    DISPLAY_QR_CODE: _ClassVar[PaymentExperience]
    ONE_CLICK: _ClassVar[PaymentExperience]
    LINK_WALLET: _ClassVar[PaymentExperience]
    INVOKE_PAYMENT_APP: _ClassVar[PaymentExperience]
    DISPLAY_WAIT_SCREEN: _ClassVar[PaymentExperience]
    COLLECT_OTP: _ClassVar[PaymentExperience]

class PaymentMethodType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    ACH: _ClassVar[PaymentMethodType]
    AFFIRM: _ClassVar[PaymentMethodType]
    AFTERPAY_CLEARPAY: _ClassVar[PaymentMethodType]
    ALFAMART: _ClassVar[PaymentMethodType]
    ALI_PAY: _ClassVar[PaymentMethodType]
    ALI_PAY_HK: _ClassVar[PaymentMethodType]
    ALMA: _ClassVar[PaymentMethodType]
    AMAZON_PAY: _ClassVar[PaymentMethodType]
    APPLE_PAY: _ClassVar[PaymentMethodType]
    ATOME: _ClassVar[PaymentMethodType]
    BACS: _ClassVar[PaymentMethodType]
    BANCONTACT_CARD: _ClassVar[PaymentMethodType]
    BECS: _ClassVar[PaymentMethodType]
    BENEFIT: _ClassVar[PaymentMethodType]
    BIZUM: _ClassVar[PaymentMethodType]
    BLIK: _ClassVar[PaymentMethodType]
    BOLETO: _ClassVar[PaymentMethodType]
    BCA_BANK_TRANSFER: _ClassVar[PaymentMethodType]
    BNI_VA: _ClassVar[PaymentMethodType]
    BRI_VA: _ClassVar[PaymentMethodType]
    CARD_REDIRECT: _ClassVar[PaymentMethodType]
    CIMB_VA: _ClassVar[PaymentMethodType]
    CLASSIC_REWARD: _ClassVar[PaymentMethodType]
    CREDIT: _ClassVar[PaymentMethodType]
    CRYPTO_CURRENCY: _ClassVar[PaymentMethodType]
    CASHAPP: _ClassVar[PaymentMethodType]
    DANA: _ClassVar[PaymentMethodType]
    DANAMON_VA: _ClassVar[PaymentMethodType]
    DEBIT: _ClassVar[PaymentMethodType]
    DUIT_NOW: _ClassVar[PaymentMethodType]
    EFECTY: _ClassVar[PaymentMethodType]
    EFT: _ClassVar[PaymentMethodType]
    EPS: _ClassVar[PaymentMethodType]
    FPS: _ClassVar[PaymentMethodType]
    EVOUCHER: _ClassVar[PaymentMethodType]
    GIROPAY: _ClassVar[PaymentMethodType]
    GIVEX: _ClassVar[PaymentMethodType]
    GOOGLE_PAY: _ClassVar[PaymentMethodType]
    GO_PAY: _ClassVar[PaymentMethodType]
    GCASH: _ClassVar[PaymentMethodType]
    IDEAL: _ClassVar[PaymentMethodType]
    INTERAC: _ClassVar[PaymentMethodType]
    INDOMARET: _ClassVar[PaymentMethodType]
    KAKAO_PAY: _ClassVar[PaymentMethodType]
    LOCAL_BANK_REDIRECT: _ClassVar[PaymentMethodType]
    MANDIRI_VA: _ClassVar[PaymentMethodType]
    KNET: _ClassVar[PaymentMethodType]
    MB_WAY: _ClassVar[PaymentMethodType]
    MOBILE_PAY: _ClassVar[PaymentMethodType]
    MOMO: _ClassVar[PaymentMethodType]
    MOMO_ATM: _ClassVar[PaymentMethodType]
    MULTIBANCO: _ClassVar[PaymentMethodType]
    ONLINE_BANKING_THAILAND: _ClassVar[PaymentMethodType]
    ONLINE_BANKING_CZECH_REPUBLIC: _ClassVar[PaymentMethodType]
    ONLINE_BANKING_FINLAND: _ClassVar[PaymentMethodType]
    ONLINE_BANKING_FPX: _ClassVar[PaymentMethodType]
    ONLINE_BANKING_POLAND: _ClassVar[PaymentMethodType]
    ONLINE_BANKING_SLOVAKIA: _ClassVar[PaymentMethodType]
    OXXO: _ClassVar[PaymentMethodType]
    PAGO_EFECTIVO: _ClassVar[PaymentMethodType]
    PERMATA_BANK_TRANSFER: _ClassVar[PaymentMethodType]
    OPEN_BANKING_UK: _ClassVar[PaymentMethodType]
    PAY_BRIGHT: _ClassVar[PaymentMethodType]
    PAZE: _ClassVar[PaymentMethodType]
    PIX: _ClassVar[PaymentMethodType]
    PAY_SAFE_CARD: _ClassVar[PaymentMethodType]
    PRZELEWY24: _ClassVar[PaymentMethodType]
    PROMPT_PAY: _ClassVar[PaymentMethodType]
    PSE: _ClassVar[PaymentMethodType]
    RED_COMPRA: _ClassVar[PaymentMethodType]
    RED_PAGOS: _ClassVar[PaymentMethodType]
    SAMSUNG_PAY: _ClassVar[PaymentMethodType]
    SEPA: _ClassVar[PaymentMethodType]
    SEPA_BANK_TRANSFER: _ClassVar[PaymentMethodType]
    SOFORT: _ClassVar[PaymentMethodType]
    SWISH: _ClassVar[PaymentMethodType]
    TOUCH_N_GO: _ClassVar[PaymentMethodType]
    TRUSTLY: _ClassVar[PaymentMethodType]
    TWINT: _ClassVar[PaymentMethodType]
    UPI_COLLECT: _ClassVar[PaymentMethodType]
    UPI_INTENT: _ClassVar[PaymentMethodType]
    VIPPS: _ClassVar[PaymentMethodType]
    VIET_QR: _ClassVar[PaymentMethodType]
    VENMO: _ClassVar[PaymentMethodType]
    WALLEY: _ClassVar[PaymentMethodType]
    WE_CHAT_PAY: _ClassVar[PaymentMethodType]
    SEVEN_ELEVEN: _ClassVar[PaymentMethodType]
    LAWSON: _ClassVar[PaymentMethodType]
    MINI_STOP: _ClassVar[PaymentMethodType]
    FAMILY_MART: _ClassVar[PaymentMethodType]
    SEICOMART: _ClassVar[PaymentMethodType]
    PAY_EASY: _ClassVar[PaymentMethodType]
    LOCAL_BANK_TRANSFER: _ClassVar[PaymentMethodType]
    OPEN_BANKING_PIS: _ClassVar[PaymentMethodType]
    DIRECT_CARRIER_BILLING: _ClassVar[PaymentMethodType]
    INSTANT_BANK_TRANSFER: _ClassVar[PaymentMethodType]

class CardNetwork(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    VISA: _ClassVar[CardNetwork]
    MASTERCARD: _ClassVar[CardNetwork]
    AMERICAN_EXPRESS: _ClassVar[CardNetwork]
    JCB: _ClassVar[CardNetwork]
    DINERS_CLUB: _ClassVar[CardNetwork]
    DISCOVER: _ClassVar[CardNetwork]
    CARTES_BANCAIRES: _ClassVar[CardNetwork]
    UNION_PAY: _ClassVar[CardNetwork]
    RU_PAY: _ClassVar[CardNetwork]
    MAESTRO: _ClassVar[CardNetwork]

class AuthenticationType(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    THREE_DS: _ClassVar[AuthenticationType]
    NO_THREE_DS: _ClassVar[AuthenticationType]

class PaymentMethod(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    CARD: _ClassVar[PaymentMethod]

class CountryAlpha2(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    US: _ClassVar[CountryAlpha2]
    AF: _ClassVar[CountryAlpha2]
    AX: _ClassVar[CountryAlpha2]
    AL: _ClassVar[CountryAlpha2]
    DZ: _ClassVar[CountryAlpha2]
    AS: _ClassVar[CountryAlpha2]
    AD: _ClassVar[CountryAlpha2]
    AO: _ClassVar[CountryAlpha2]
    AI: _ClassVar[CountryAlpha2]
    AQ: _ClassVar[CountryAlpha2]
    AG: _ClassVar[CountryAlpha2]
    AR: _ClassVar[CountryAlpha2]
    AM: _ClassVar[CountryAlpha2]
    AW: _ClassVar[CountryAlpha2]
    AU: _ClassVar[CountryAlpha2]
    AT: _ClassVar[CountryAlpha2]
    AZ: _ClassVar[CountryAlpha2]
    BS: _ClassVar[CountryAlpha2]
    BH: _ClassVar[CountryAlpha2]
    BD: _ClassVar[CountryAlpha2]
    BB: _ClassVar[CountryAlpha2]
    BY: _ClassVar[CountryAlpha2]
    BE: _ClassVar[CountryAlpha2]
    BZ: _ClassVar[CountryAlpha2]
    BJ: _ClassVar[CountryAlpha2]
    BM: _ClassVar[CountryAlpha2]
    BT: _ClassVar[CountryAlpha2]
    BO: _ClassVar[CountryAlpha2]
    BQ: _ClassVar[CountryAlpha2]
    BA: _ClassVar[CountryAlpha2]
    BW: _ClassVar[CountryAlpha2]
    BV: _ClassVar[CountryAlpha2]
    BR: _ClassVar[CountryAlpha2]
    IO: _ClassVar[CountryAlpha2]
    BN: _ClassVar[CountryAlpha2]
    BG: _ClassVar[CountryAlpha2]
    BF: _ClassVar[CountryAlpha2]
    BI: _ClassVar[CountryAlpha2]
    KH: _ClassVar[CountryAlpha2]
    CM: _ClassVar[CountryAlpha2]
    CA: _ClassVar[CountryAlpha2]
    CV: _ClassVar[CountryAlpha2]
    KY: _ClassVar[CountryAlpha2]
    CF: _ClassVar[CountryAlpha2]
    TD: _ClassVar[CountryAlpha2]
    CL: _ClassVar[CountryAlpha2]
    CN: _ClassVar[CountryAlpha2]
    CX: _ClassVar[CountryAlpha2]
    CC: _ClassVar[CountryAlpha2]
    CO: _ClassVar[CountryAlpha2]
    KM: _ClassVar[CountryAlpha2]
    CG: _ClassVar[CountryAlpha2]
    CD: _ClassVar[CountryAlpha2]
    CK: _ClassVar[CountryAlpha2]
    CR: _ClassVar[CountryAlpha2]
    CI: _ClassVar[CountryAlpha2]
    HR: _ClassVar[CountryAlpha2]
    CU: _ClassVar[CountryAlpha2]
    CW: _ClassVar[CountryAlpha2]
    CY: _ClassVar[CountryAlpha2]
    CZ: _ClassVar[CountryAlpha2]
    DK: _ClassVar[CountryAlpha2]
    DJ: _ClassVar[CountryAlpha2]
    DM: _ClassVar[CountryAlpha2]
    DO: _ClassVar[CountryAlpha2]
    EC: _ClassVar[CountryAlpha2]
    EG: _ClassVar[CountryAlpha2]
    SV: _ClassVar[CountryAlpha2]
    GQ: _ClassVar[CountryAlpha2]
    ER: _ClassVar[CountryAlpha2]
    EE: _ClassVar[CountryAlpha2]
    ET: _ClassVar[CountryAlpha2]
    FK: _ClassVar[CountryAlpha2]
    FO: _ClassVar[CountryAlpha2]
    FJ: _ClassVar[CountryAlpha2]
    FI: _ClassVar[CountryAlpha2]
    FR: _ClassVar[CountryAlpha2]
    GF: _ClassVar[CountryAlpha2]
    PF: _ClassVar[CountryAlpha2]
    TF: _ClassVar[CountryAlpha2]
    GA: _ClassVar[CountryAlpha2]
    GM: _ClassVar[CountryAlpha2]
    GE: _ClassVar[CountryAlpha2]
    DE: _ClassVar[CountryAlpha2]
    GH: _ClassVar[CountryAlpha2]
    GI: _ClassVar[CountryAlpha2]
    GR: _ClassVar[CountryAlpha2]
    GL: _ClassVar[CountryAlpha2]
    GD: _ClassVar[CountryAlpha2]
    GP: _ClassVar[CountryAlpha2]
    GU: _ClassVar[CountryAlpha2]
    GT: _ClassVar[CountryAlpha2]
    GG: _ClassVar[CountryAlpha2]
    GN: _ClassVar[CountryAlpha2]
    GW: _ClassVar[CountryAlpha2]
    GY: _ClassVar[CountryAlpha2]
    HT: _ClassVar[CountryAlpha2]
    HM: _ClassVar[CountryAlpha2]
    VA: _ClassVar[CountryAlpha2]
    HN: _ClassVar[CountryAlpha2]
    HK: _ClassVar[CountryAlpha2]
    HU: _ClassVar[CountryAlpha2]
    IS: _ClassVar[CountryAlpha2]
    IN: _ClassVar[CountryAlpha2]
    ID: _ClassVar[CountryAlpha2]
    IR: _ClassVar[CountryAlpha2]
    IQ: _ClassVar[CountryAlpha2]
    IE: _ClassVar[CountryAlpha2]
    IM: _ClassVar[CountryAlpha2]
    IL: _ClassVar[CountryAlpha2]
    IT: _ClassVar[CountryAlpha2]
    JM: _ClassVar[CountryAlpha2]
    JP: _ClassVar[CountryAlpha2]
    JE: _ClassVar[CountryAlpha2]
    JO: _ClassVar[CountryAlpha2]
    KZ: _ClassVar[CountryAlpha2]
    KE: _ClassVar[CountryAlpha2]
    KI: _ClassVar[CountryAlpha2]
    KP: _ClassVar[CountryAlpha2]
    KR: _ClassVar[CountryAlpha2]
    KW: _ClassVar[CountryAlpha2]
    KG: _ClassVar[CountryAlpha2]
    LA: _ClassVar[CountryAlpha2]
    LV: _ClassVar[CountryAlpha2]
    LB: _ClassVar[CountryAlpha2]
    LS: _ClassVar[CountryAlpha2]
    LR: _ClassVar[CountryAlpha2]
    LY: _ClassVar[CountryAlpha2]
    LI: _ClassVar[CountryAlpha2]
    LT: _ClassVar[CountryAlpha2]
    LU: _ClassVar[CountryAlpha2]
    MO: _ClassVar[CountryAlpha2]
    MK: _ClassVar[CountryAlpha2]
    MG: _ClassVar[CountryAlpha2]
    MW: _ClassVar[CountryAlpha2]
    MY: _ClassVar[CountryAlpha2]
    MV: _ClassVar[CountryAlpha2]
    ML: _ClassVar[CountryAlpha2]
    MT: _ClassVar[CountryAlpha2]
    MH: _ClassVar[CountryAlpha2]
    MQ: _ClassVar[CountryAlpha2]
    MR: _ClassVar[CountryAlpha2]
    MU: _ClassVar[CountryAlpha2]
    YT: _ClassVar[CountryAlpha2]
    MX: _ClassVar[CountryAlpha2]
    FM: _ClassVar[CountryAlpha2]
    MD: _ClassVar[CountryAlpha2]
    MC: _ClassVar[CountryAlpha2]
    MN: _ClassVar[CountryAlpha2]
    ME: _ClassVar[CountryAlpha2]
    MS: _ClassVar[CountryAlpha2]
    MA: _ClassVar[CountryAlpha2]
    MZ: _ClassVar[CountryAlpha2]
    MM: _ClassVar[CountryAlpha2]
    NA: _ClassVar[CountryAlpha2]
    NR: _ClassVar[CountryAlpha2]
    NP: _ClassVar[CountryAlpha2]
    NL: _ClassVar[CountryAlpha2]
    NC: _ClassVar[CountryAlpha2]
    NZ: _ClassVar[CountryAlpha2]
    NI: _ClassVar[CountryAlpha2]
    NE: _ClassVar[CountryAlpha2]
    NG: _ClassVar[CountryAlpha2]
    NU: _ClassVar[CountryAlpha2]
    NF: _ClassVar[CountryAlpha2]
    MP: _ClassVar[CountryAlpha2]
    NO: _ClassVar[CountryAlpha2]
    OM: _ClassVar[CountryAlpha2]
    PK: _ClassVar[CountryAlpha2]
    PW: _ClassVar[CountryAlpha2]
    PS: _ClassVar[CountryAlpha2]
    PA: _ClassVar[CountryAlpha2]
    PG: _ClassVar[CountryAlpha2]
    PY: _ClassVar[CountryAlpha2]
    PE: _ClassVar[CountryAlpha2]
    PH: _ClassVar[CountryAlpha2]
    PN: _ClassVar[CountryAlpha2]
    PL: _ClassVar[CountryAlpha2]
    PT: _ClassVar[CountryAlpha2]
    PR: _ClassVar[CountryAlpha2]
    QA: _ClassVar[CountryAlpha2]
    RE: _ClassVar[CountryAlpha2]
    RO: _ClassVar[CountryAlpha2]
    RU: _ClassVar[CountryAlpha2]
    RW: _ClassVar[CountryAlpha2]
    BL: _ClassVar[CountryAlpha2]
    SH: _ClassVar[CountryAlpha2]
    KN: _ClassVar[CountryAlpha2]
    LC: _ClassVar[CountryAlpha2]
    MF: _ClassVar[CountryAlpha2]
    PM: _ClassVar[CountryAlpha2]
    VC: _ClassVar[CountryAlpha2]
    WS: _ClassVar[CountryAlpha2]
    SM: _ClassVar[CountryAlpha2]
    ST: _ClassVar[CountryAlpha2]
    SA: _ClassVar[CountryAlpha2]
    SN: _ClassVar[CountryAlpha2]
    RS: _ClassVar[CountryAlpha2]
    SC: _ClassVar[CountryAlpha2]
    SL: _ClassVar[CountryAlpha2]
    SG: _ClassVar[CountryAlpha2]
    SX: _ClassVar[CountryAlpha2]
    SK: _ClassVar[CountryAlpha2]
    SI: _ClassVar[CountryAlpha2]
    SB: _ClassVar[CountryAlpha2]
    SO: _ClassVar[CountryAlpha2]
    ZA: _ClassVar[CountryAlpha2]
    GS: _ClassVar[CountryAlpha2]
    SS: _ClassVar[CountryAlpha2]
    ES: _ClassVar[CountryAlpha2]
    LK: _ClassVar[CountryAlpha2]
    SD: _ClassVar[CountryAlpha2]
    SR: _ClassVar[CountryAlpha2]
    SJ: _ClassVar[CountryAlpha2]
    SZ: _ClassVar[CountryAlpha2]
    SE: _ClassVar[CountryAlpha2]
    CH: _ClassVar[CountryAlpha2]
    SY: _ClassVar[CountryAlpha2]
    TW: _ClassVar[CountryAlpha2]
    TJ: _ClassVar[CountryAlpha2]
    TZ: _ClassVar[CountryAlpha2]
    TH: _ClassVar[CountryAlpha2]
    TL: _ClassVar[CountryAlpha2]
    TG: _ClassVar[CountryAlpha2]
    TK: _ClassVar[CountryAlpha2]
    TO: _ClassVar[CountryAlpha2]
    TT: _ClassVar[CountryAlpha2]
    TN: _ClassVar[CountryAlpha2]
    TR: _ClassVar[CountryAlpha2]
    TM: _ClassVar[CountryAlpha2]
    TC: _ClassVar[CountryAlpha2]
    TV: _ClassVar[CountryAlpha2]
    UG: _ClassVar[CountryAlpha2]
    UA: _ClassVar[CountryAlpha2]
    AE: _ClassVar[CountryAlpha2]
    GB: _ClassVar[CountryAlpha2]
    UM: _ClassVar[CountryAlpha2]
    UY: _ClassVar[CountryAlpha2]
    UZ: _ClassVar[CountryAlpha2]
    VU: _ClassVar[CountryAlpha2]
    VE: _ClassVar[CountryAlpha2]
    VN: _ClassVar[CountryAlpha2]
    VG: _ClassVar[CountryAlpha2]
    VI: _ClassVar[CountryAlpha2]
    WF: _ClassVar[CountryAlpha2]
    EH: _ClassVar[CountryAlpha2]
    YE: _ClassVar[CountryAlpha2]
    ZM: _ClassVar[CountryAlpha2]
    ZW: _ClassVar[CountryAlpha2]

class AttemptStatus(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    STARTED: _ClassVar[AttemptStatus]
    AUTHENTICATION_FAILED: _ClassVar[AttemptStatus]
    ROUTER_DECLINED: _ClassVar[AttemptStatus]
    AUTHENTICATION_PENDING: _ClassVar[AttemptStatus]
    AUTHENTICATION_SUCCESSFUL: _ClassVar[AttemptStatus]
    AUTHORIZED: _ClassVar[AttemptStatus]
    AUTHORIZATION_FAILED: _ClassVar[AttemptStatus]
    CHARGED: _ClassVar[AttemptStatus]
    AUTHORIZING: _ClassVar[AttemptStatus]
    COD_INITIATED: _ClassVar[AttemptStatus]
    VOIDED: _ClassVar[AttemptStatus]
    VOID_INITIATED: _ClassVar[AttemptStatus]
    CAPTURE_INITIATED: _ClassVar[AttemptStatus]
    CAPTURE_FAILED: _ClassVar[AttemptStatus]
    VOID_FAILED: _ClassVar[AttemptStatus]
    AUTO_REFUNDED: _ClassVar[AttemptStatus]
    PARTIAL_CHARGED: _ClassVar[AttemptStatus]
    PARTIAL_CHARGED_AND_CHARGEABLE: _ClassVar[AttemptStatus]
    UNRESOLVED: _ClassVar[AttemptStatus]
    PENDING: _ClassVar[AttemptStatus]
    FAILURE: _ClassVar[AttemptStatus]
    PAYMENT_METHOD_AWAITED: _ClassVar[AttemptStatus]
    CONFIRMATION_AWAITED: _ClassVar[AttemptStatus]
    DEVICE_DATA_COLLECTION_PENDING: _ClassVar[AttemptStatus]

class RefundStatus(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
    __slots__ = ()
    REFUND_FAILURE: _ClassVar[RefundStatus]
    REFUND_MANUAL_REVIEW: _ClassVar[RefundStatus]
    REFUND_PENDING: _ClassVar[RefundStatus]
    REFUND_SUCCESS: _ClassVar[RefundStatus]
    REFUND_TRANSACTION_FAILURE: _ClassVar[RefundStatus]
PAYMENT: EventType
REFUND: EventType
ADYENPLATFORM: Connector
ACI: Connector
ADYEN: Connector
AIRWALLEX: Connector
AUTHORIZEDOTNET: Connector
BAMBORA: Connector
BAMBORAAPAC: Connector
BANKOFAMERICA: Connector
BILLWERK: Connector
BITPAY: Connector
BLUESNAP: Connector
BOKU: Connector
BRAINTREE: Connector
CASHTOCODE: Connector
CHARGEBEE: Connector
CHECKOUT: Connector
COINBASE: Connector
COINGATE: Connector
CRYPTOPAY: Connector
CTP_MASTERCARD: Connector
CTP_VISA: Connector
CYBERSOURCE: Connector
DATATRANS: Connector
DEUTSCHEBANK: Connector
DIGITALVIRGO: Connector
DLOCAL: Connector
EBANX: Connector
ELAVON: Connector
FISERV: Connector
FISERVEMEA: Connector
FIUU: Connector
FORTE: Connector
GETNET: Connector
GLOBALPAY: Connector
GLOBEPAY: Connector
GOCARDLESS: Connector
GPAYMENTS: Connector
HIPAY: Connector
HELCIM: Connector
INESPAY: Connector
IATAPAY: Connector
ITAUBANK: Connector
JPMORGAN: Connector
JUSPAYTHREEDSSERVER: Connector
KLARNA: Connector
MIFINITY: Connector
MOLLIE: Connector
MONERIS: Connector
MULTISAFEPAY: Connector
NETCETERA: Connector
NEXINETS: Connector
NEXIXPAY: Connector
NMI: Connector
NOMUPAY: Connector
NOON: Connector
NOVALNET: Connector
NUVEI: Connector
OPENNODE: Connector
PAYBOX: Connector
PAYME: Connector
PAYONE: Connector
PAYPAL: Connector
PAYSTACK: Connector
PAYU: Connector
PLACETOPAY: Connector
POWERTRANZ: Connector
PROPHETPAY: Connector
RAPYD: Connector
RAZORPAY: Connector
RECURLY: Connector
REDSYS: Connector
SHIFT4: Connector
SQUARE: Connector
STAX: Connector
STRIPE: Connector
TAXJAR: Connector
THREEDSECUREIO: Connector
TRUSTPAY: Connector
TSYS: Connector
VOLT: Connector
WELLSFARGO: Connector
WISE: Connector
WORLDLINE: Connector
WORLDPAY: Connector
SIGNIFYD: Connector
PLAID: Connector
RISKIFIED: Connector
XENDIT: Connector
ZEN: Connector
ZSL: Connector
GET: Method
POST: Method
AED: Currency
AFN: Currency
ALL: Currency
AMD: Currency
ANG: Currency
AOA: Currency
ARS: Currency
AUD: Currency
AWG: Currency
AZN: Currency
BAM: Currency
BBD: Currency
BDT: Currency
BGN: Currency
BHD: Currency
BIF: Currency
BMD: Currency
BND: Currency
BOB: Currency
BRL: Currency
BSD: Currency
BTN: Currency
BWP: Currency
BYN: Currency
BZD: Currency
CAD: Currency
CDF: Currency
CHF: Currency
CLF: Currency
CLP: Currency
CNY: Currency
COP: Currency
CRC: Currency
CUC: Currency
CUP: Currency
CVE: Currency
CZK: Currency
DJF: Currency
DKK: Currency
DOP: Currency
DZD: Currency
EGP: Currency
ERN: Currency
ETB: Currency
EUR: Currency
FJD: Currency
FKP: Currency
GBP: Currency
GEL: Currency
GHS: Currency
GIP: Currency
GMD: Currency
GNF: Currency
GTQ: Currency
GYD: Currency
HKD: Currency
HNL: Currency
HRK: Currency
HTG: Currency
HUF: Currency
IDR: Currency
ILS: Currency
INR: Currency
IQD: Currency
IRR: Currency
ISK: Currency
JMD: Currency
JOD: Currency
JPY: Currency
KES: Currency
KGS: Currency
KHR: Currency
KMF: Currency
KPW: Currency
KRW: Currency
KWD: Currency
KYD: Currency
KZT: Currency
LAK: Currency
LBP: Currency
LKR: Currency
LRD: Currency
LSL: Currency
LYD: Currency
MAD: Currency
MDL: Currency
MGA: Currency
MKD: Currency
MMK: Currency
MNT: Currency
MOP: Currency
MRU: Currency
MUR: Currency
MVR: Currency
MWK: Currency
MXN: Currency
MYR: Currency
MZN: Currency
NAD: Currency
NGN: Currency
NIO: Currency
NOK: Currency
NPR: Currency
NZD: Currency
OMR: Currency
PAB: Currency
PEN: Currency
PGK: Currency
PHP: Currency
PKR: Currency
PLN: Currency
PYG: Currency
QAR: Currency
RON: Currency
RSD: Currency
RUB: Currency
RWF: Currency
SAR: Currency
SBD: Currency
SCR: Currency
SDG: Currency
SEK: Currency
SGD: Currency
SHP: Currency
SLE: Currency
SLL: Currency
SOS: Currency
SRD: Currency
SSP: Currency
STD: Currency
STN: Currency
SVC: Currency
SYP: Currency
SZL: Currency
THB: Currency
TJS: Currency
TMT: Currency
TND: Currency
TOP: Currency
TRY: Currency
TTD: Currency
TWD: Currency
TZS: Currency
UAH: Currency
UGX: Currency
USD: Currency
UYU: Currency
UZS: Currency
VES: Currency
VND: Currency
VUV: Currency
WST: Currency
XAF: Currency
XCD: Currency
XOF: Currency
XPF: Currency
YER: Currency
ZAR: Currency
ZMW: Currency
ZWL: Currency
AUTOMATIC: CaptureMethod
MANUAL: CaptureMethod
MANUAL_MULTIPLE: CaptureMethod
SCHEDULED: CaptureMethod
SEQUENTIAL_AUTOMATIC: CaptureMethod
OFF_SESSION: FutureUsage
ON_SESSION: FutureUsage
ONLINE: AcceptanceType
OFFLINE: AcceptanceType
REDIRECT_TO_URL: PaymentExperience
INVOKE_SDK_CLIENT: PaymentExperience
DISPLAY_QR_CODE: PaymentExperience
ONE_CLICK: PaymentExperience
LINK_WALLET: PaymentExperience
INVOKE_PAYMENT_APP: PaymentExperience
DISPLAY_WAIT_SCREEN: PaymentExperience
COLLECT_OTP: PaymentExperience
ACH: PaymentMethodType
AFFIRM: PaymentMethodType
AFTERPAY_CLEARPAY: PaymentMethodType
ALFAMART: PaymentMethodType
ALI_PAY: PaymentMethodType
ALI_PAY_HK: PaymentMethodType
ALMA: PaymentMethodType
AMAZON_PAY: PaymentMethodType
APPLE_PAY: PaymentMethodType
ATOME: PaymentMethodType
BACS: PaymentMethodType
BANCONTACT_CARD: PaymentMethodType
BECS: PaymentMethodType
BENEFIT: PaymentMethodType
BIZUM: PaymentMethodType
BLIK: PaymentMethodType
BOLETO: PaymentMethodType
BCA_BANK_TRANSFER: PaymentMethodType
BNI_VA: PaymentMethodType
BRI_VA: PaymentMethodType
CARD_REDIRECT: PaymentMethodType
CIMB_VA: PaymentMethodType
CLASSIC_REWARD: PaymentMethodType
CREDIT: PaymentMethodType
CRYPTO_CURRENCY: PaymentMethodType
CASHAPP: PaymentMethodType
DANA: PaymentMethodType
DANAMON_VA: PaymentMethodType
DEBIT: PaymentMethodType
DUIT_NOW: PaymentMethodType
EFECTY: PaymentMethodType
EFT: PaymentMethodType
EPS: PaymentMethodType
FPS: PaymentMethodType
EVOUCHER: PaymentMethodType
GIROPAY: PaymentMethodType
GIVEX: PaymentMethodType
GOOGLE_PAY: PaymentMethodType
GO_PAY: PaymentMethodType
GCASH: PaymentMethodType
IDEAL: PaymentMethodType
INTERAC: PaymentMethodType
INDOMARET: PaymentMethodType
KAKAO_PAY: PaymentMethodType
LOCAL_BANK_REDIRECT: PaymentMethodType
MANDIRI_VA: PaymentMethodType
KNET: PaymentMethodType
MB_WAY: PaymentMethodType
MOBILE_PAY: PaymentMethodType
MOMO: PaymentMethodType
MOMO_ATM: PaymentMethodType
MULTIBANCO: PaymentMethodType
ONLINE_BANKING_THAILAND: PaymentMethodType
ONLINE_BANKING_CZECH_REPUBLIC: PaymentMethodType
ONLINE_BANKING_FINLAND: PaymentMethodType
ONLINE_BANKING_FPX: PaymentMethodType
ONLINE_BANKING_POLAND: PaymentMethodType
ONLINE_BANKING_SLOVAKIA: PaymentMethodType
OXXO: PaymentMethodType
PAGO_EFECTIVO: PaymentMethodType
PERMATA_BANK_TRANSFER: PaymentMethodType
OPEN_BANKING_UK: PaymentMethodType
PAY_BRIGHT: PaymentMethodType
PAZE: PaymentMethodType
PIX: PaymentMethodType
PAY_SAFE_CARD: PaymentMethodType
PRZELEWY24: PaymentMethodType
PROMPT_PAY: PaymentMethodType
PSE: PaymentMethodType
RED_COMPRA: PaymentMethodType
RED_PAGOS: PaymentMethodType
SAMSUNG_PAY: PaymentMethodType
SEPA: PaymentMethodType
SEPA_BANK_TRANSFER: PaymentMethodType
SOFORT: PaymentMethodType
SWISH: PaymentMethodType
TOUCH_N_GO: PaymentMethodType
TRUSTLY: PaymentMethodType
TWINT: PaymentMethodType
UPI_COLLECT: PaymentMethodType
UPI_INTENT: PaymentMethodType
VIPPS: PaymentMethodType
VIET_QR: PaymentMethodType
VENMO: PaymentMethodType
WALLEY: PaymentMethodType
WE_CHAT_PAY: PaymentMethodType
SEVEN_ELEVEN: PaymentMethodType
LAWSON: PaymentMethodType
MINI_STOP: PaymentMethodType
FAMILY_MART: PaymentMethodType
SEICOMART: PaymentMethodType
PAY_EASY: PaymentMethodType
LOCAL_BANK_TRANSFER: PaymentMethodType
OPEN_BANKING_PIS: PaymentMethodType
DIRECT_CARRIER_BILLING: PaymentMethodType
INSTANT_BANK_TRANSFER: PaymentMethodType
VISA: CardNetwork
MASTERCARD: CardNetwork
AMERICAN_EXPRESS: CardNetwork
JCB: CardNetwork
DINERS_CLUB: CardNetwork
DISCOVER: CardNetwork
CARTES_BANCAIRES: CardNetwork
UNION_PAY: CardNetwork
RU_PAY: CardNetwork
MAESTRO: CardNetwork
THREE_DS: AuthenticationType
NO_THREE_DS: AuthenticationType
CARD: PaymentMethod
US: CountryAlpha2
AF: CountryAlpha2
AX: CountryAlpha2
AL: CountryAlpha2
DZ: CountryAlpha2
AS: CountryAlpha2
AD: CountryAlpha2
AO: CountryAlpha2
AI: CountryAlpha2
AQ: CountryAlpha2
AG: CountryAlpha2
AR: CountryAlpha2
AM: CountryAlpha2
AW: CountryAlpha2
AU: CountryAlpha2
AT: CountryAlpha2
AZ: CountryAlpha2
BS: CountryAlpha2
BH: CountryAlpha2
BD: CountryAlpha2
BB: CountryAlpha2
BY: CountryAlpha2
BE: CountryAlpha2
BZ: CountryAlpha2
BJ: CountryAlpha2
BM: CountryAlpha2
BT: CountryAlpha2
BO: CountryAlpha2
BQ: CountryAlpha2
BA: CountryAlpha2
BW: CountryAlpha2
BV: CountryAlpha2
BR: CountryAlpha2
IO: CountryAlpha2
BN: CountryAlpha2
BG: CountryAlpha2
BF: CountryAlpha2
BI: CountryAlpha2
KH: CountryAlpha2
CM: CountryAlpha2
CA: CountryAlpha2
CV: CountryAlpha2
KY: CountryAlpha2
CF: CountryAlpha2
TD: CountryAlpha2
CL: CountryAlpha2
CN: CountryAlpha2
CX: CountryAlpha2
CC: CountryAlpha2
CO: CountryAlpha2
KM: CountryAlpha2
CG: CountryAlpha2
CD: CountryAlpha2
CK: CountryAlpha2
CR: CountryAlpha2
CI: CountryAlpha2
HR: CountryAlpha2
CU: CountryAlpha2
CW: CountryAlpha2
CY: CountryAlpha2
CZ: CountryAlpha2
DK: CountryAlpha2
DJ: CountryAlpha2
DM: CountryAlpha2
DO: CountryAlpha2
EC: CountryAlpha2
EG: CountryAlpha2
SV: CountryAlpha2
GQ: CountryAlpha2
ER: CountryAlpha2
EE: CountryAlpha2
ET: CountryAlpha2
FK: CountryAlpha2
FO: CountryAlpha2
FJ: CountryAlpha2
FI: CountryAlpha2
FR: CountryAlpha2
GF: CountryAlpha2
PF: CountryAlpha2
TF: CountryAlpha2
GA: CountryAlpha2
GM: CountryAlpha2
GE: CountryAlpha2
DE: CountryAlpha2
GH: CountryAlpha2
GI: CountryAlpha2
GR: CountryAlpha2
GL: CountryAlpha2
GD: CountryAlpha2
GP: CountryAlpha2
GU: CountryAlpha2
GT: CountryAlpha2
GG: CountryAlpha2
GN: CountryAlpha2
GW: CountryAlpha2
GY: CountryAlpha2
HT: CountryAlpha2
HM: CountryAlpha2
VA: CountryAlpha2
HN: CountryAlpha2
HK: CountryAlpha2
HU: CountryAlpha2
IS: CountryAlpha2
IN: CountryAlpha2
ID: CountryAlpha2
IR: CountryAlpha2
IQ: CountryAlpha2
IE: CountryAlpha2
IM: CountryAlpha2
IL: CountryAlpha2
IT: CountryAlpha2
JM: CountryAlpha2
JP: CountryAlpha2
JE: CountryAlpha2
JO: CountryAlpha2
KZ: CountryAlpha2
KE: CountryAlpha2
KI: CountryAlpha2
KP: CountryAlpha2
KR: CountryAlpha2
KW: CountryAlpha2
KG: CountryAlpha2
LA: CountryAlpha2
LV: CountryAlpha2
LB: CountryAlpha2
LS: CountryAlpha2
LR: CountryAlpha2
LY: CountryAlpha2
LI: CountryAlpha2
LT: CountryAlpha2
LU: CountryAlpha2
MO: CountryAlpha2
MK: CountryAlpha2
MG: CountryAlpha2
MW: CountryAlpha2
MY: CountryAlpha2
MV: CountryAlpha2
ML: CountryAlpha2
MT: CountryAlpha2
MH: CountryAlpha2
MQ: CountryAlpha2
MR: CountryAlpha2
MU: CountryAlpha2
YT: CountryAlpha2
MX: CountryAlpha2
FM: CountryAlpha2
MD: CountryAlpha2
MC: CountryAlpha2
MN: CountryAlpha2
ME: CountryAlpha2
MS: CountryAlpha2
MA: CountryAlpha2
MZ: CountryAlpha2
MM: CountryAlpha2
NA: CountryAlpha2
NR: CountryAlpha2
NP: CountryAlpha2
NL: CountryAlpha2
NC: CountryAlpha2
NZ: CountryAlpha2
NI: CountryAlpha2
NE: CountryAlpha2
NG: CountryAlpha2
NU: CountryAlpha2
NF: CountryAlpha2
MP: CountryAlpha2
NO: CountryAlpha2
OM: CountryAlpha2
PK: CountryAlpha2
PW: CountryAlpha2
PS: CountryAlpha2
PA: CountryAlpha2
PG: CountryAlpha2
PY: CountryAlpha2
PE: CountryAlpha2
PH: CountryAlpha2
PN: CountryAlpha2
PL: CountryAlpha2
PT: CountryAlpha2
PR: CountryAlpha2
QA: CountryAlpha2
RE: CountryAlpha2
RO: CountryAlpha2
RU: CountryAlpha2
RW: CountryAlpha2
BL: CountryAlpha2
SH: CountryAlpha2
KN: CountryAlpha2
LC: CountryAlpha2
MF: CountryAlpha2
PM: CountryAlpha2
VC: CountryAlpha2
WS: CountryAlpha2
SM: CountryAlpha2
ST: CountryAlpha2
SA: CountryAlpha2
SN: CountryAlpha2
RS: CountryAlpha2
SC: CountryAlpha2
SL: CountryAlpha2
SG: CountryAlpha2
SX: CountryAlpha2
SK: CountryAlpha2
SI: CountryAlpha2
SB: CountryAlpha2
SO: CountryAlpha2
ZA: CountryAlpha2
GS: CountryAlpha2
SS: CountryAlpha2
ES: CountryAlpha2
LK: CountryAlpha2
SD: CountryAlpha2
SR: CountryAlpha2
SJ: CountryAlpha2
SZ: CountryAlpha2
SE: CountryAlpha2
CH: CountryAlpha2
SY: CountryAlpha2
TW: CountryAlpha2
TJ: CountryAlpha2
TZ: CountryAlpha2
TH: CountryAlpha2
TL: CountryAlpha2
TG: CountryAlpha2
TK: CountryAlpha2
TO: CountryAlpha2
TT: CountryAlpha2
TN: CountryAlpha2
TR: CountryAlpha2
TM: CountryAlpha2
TC: CountryAlpha2
TV: CountryAlpha2
UG: CountryAlpha2
UA: CountryAlpha2
AE: CountryAlpha2
GB: CountryAlpha2
UM: CountryAlpha2
UY: CountryAlpha2
UZ: CountryAlpha2
VU: CountryAlpha2
VE: CountryAlpha2
VN: CountryAlpha2
VG: CountryAlpha2
VI: CountryAlpha2
WF: CountryAlpha2
EH: CountryAlpha2
YE: CountryAlpha2
ZM: CountryAlpha2
ZW: CountryAlpha2
STARTED: AttemptStatus
AUTHENTICATION_FAILED: AttemptStatus
ROUTER_DECLINED: AttemptStatus
AUTHENTICATION_PENDING: AttemptStatus
AUTHENTICATION_SUCCESSFUL: AttemptStatus
AUTHORIZED: AttemptStatus
AUTHORIZATION_FAILED: AttemptStatus
CHARGED: AttemptStatus
AUTHORIZING: AttemptStatus
COD_INITIATED: AttemptStatus
VOIDED: AttemptStatus
VOID_INITIATED: AttemptStatus
CAPTURE_INITIATED: AttemptStatus
CAPTURE_FAILED: AttemptStatus
VOID_FAILED: AttemptStatus
AUTO_REFUNDED: AttemptStatus
PARTIAL_CHARGED: AttemptStatus
PARTIAL_CHARGED_AND_CHARGEABLE: AttemptStatus
UNRESOLVED: AttemptStatus
PENDING: AttemptStatus
FAILURE: AttemptStatus
PAYMENT_METHOD_AWAITED: AttemptStatus
CONFIRMATION_AWAITED: AttemptStatus
DEVICE_DATA_COLLECTION_PENDING: AttemptStatus
REFUND_FAILURE: RefundStatus
REFUND_MANUAL_REVIEW: RefundStatus
REFUND_PENDING: RefundStatus
REFUND_SUCCESS: RefundStatus
REFUND_TRANSACTION_FAILURE: RefundStatus

class PaymentsAuthorizeRequest(_message.Message):
    __slots__ = ("amount", "currency", "payment_method", "payment_method_data", "connector_customer", "address", "auth_type", "connector_meta_data", "access_token", "session_token", "payment_method_token", "connector_request_reference_id", "order_tax_amount", "email", "customer_name", "capture_method", "return_url", "webhook_url", "complete_authorize_url", "setup_future_usage", "off_session", "customer_acceptance", "browser_info", "order_category", "enrolled_for_3ds", "payment_experience", "payment_method_type", "request_incremental_authorization", "authentication_data", "request_extended_authorization", "minor_amount", "merchant_order_reference_id", "shipping_cost")
    AMOUNT_FIELD_NUMBER: _ClassVar[int]
    CURRENCY_FIELD_NUMBER: _ClassVar[int]
    PAYMENT_METHOD_FIELD_NUMBER: _ClassVar[int]
    PAYMENT_METHOD_DATA_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_CUSTOMER_FIELD_NUMBER: _ClassVar[int]
    ADDRESS_FIELD_NUMBER: _ClassVar[int]
    AUTH_TYPE_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_META_DATA_FIELD_NUMBER: _ClassVar[int]
    ACCESS_TOKEN_FIELD_NUMBER: _ClassVar[int]
    SESSION_TOKEN_FIELD_NUMBER: _ClassVar[int]
    PAYMENT_METHOD_TOKEN_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_REQUEST_REFERENCE_ID_FIELD_NUMBER: _ClassVar[int]
    ORDER_TAX_AMOUNT_FIELD_NUMBER: _ClassVar[int]
    EMAIL_FIELD_NUMBER: _ClassVar[int]
    CUSTOMER_NAME_FIELD_NUMBER: _ClassVar[int]
    CAPTURE_METHOD_FIELD_NUMBER: _ClassVar[int]
    RETURN_URL_FIELD_NUMBER: _ClassVar[int]
    WEBHOOK_URL_FIELD_NUMBER: _ClassVar[int]
    COMPLETE_AUTHORIZE_URL_FIELD_NUMBER: _ClassVar[int]
    SETUP_FUTURE_USAGE_FIELD_NUMBER: _ClassVar[int]
    OFF_SESSION_FIELD_NUMBER: _ClassVar[int]
    CUSTOMER_ACCEPTANCE_FIELD_NUMBER: _ClassVar[int]
    BROWSER_INFO_FIELD_NUMBER: _ClassVar[int]
    ORDER_CATEGORY_FIELD_NUMBER: _ClassVar[int]
    ENROLLED_FOR_3DS_FIELD_NUMBER: _ClassVar[int]
    PAYMENT_EXPERIENCE_FIELD_NUMBER: _ClassVar[int]
    PAYMENT_METHOD_TYPE_FIELD_NUMBER: _ClassVar[int]
    REQUEST_INCREMENTAL_AUTHORIZATION_FIELD_NUMBER: _ClassVar[int]
    AUTHENTICATION_DATA_FIELD_NUMBER: _ClassVar[int]
    REQUEST_EXTENDED_AUTHORIZATION_FIELD_NUMBER: _ClassVar[int]
    MINOR_AMOUNT_FIELD_NUMBER: _ClassVar[int]
    MERCHANT_ORDER_REFERENCE_ID_FIELD_NUMBER: _ClassVar[int]
    SHIPPING_COST_FIELD_NUMBER: _ClassVar[int]
    amount: int
    currency: Currency
    payment_method: PaymentMethod
    payment_method_data: PaymentMethodData
    connector_customer: str
    address: PaymentAddress
    auth_type: AuthenticationType
    connector_meta_data: bytes
    access_token: AccessToken
    session_token: str
    payment_method_token: PaymentMethodToken
    connector_request_reference_id: str
    order_tax_amount: int
    email: str
    customer_name: str
    capture_method: CaptureMethod
    return_url: str
    webhook_url: str
    complete_authorize_url: str
    setup_future_usage: FutureUsage
    off_session: bool
    customer_acceptance: CustomerAcceptance
    browser_info: BrowserInformation
    order_category: str
    enrolled_for_3ds: bool
    payment_experience: PaymentExperience
    payment_method_type: PaymentMethodType
    request_incremental_authorization: bool
    authentication_data: AuthenticationData
    request_extended_authorization: bool
    minor_amount: int
    merchant_order_reference_id: str
    shipping_cost: int
    def __init__(self, amount: _Optional[int] = ..., currency: _Optional[_Union[Currency, str]] = ..., payment_method: _Optional[_Union[PaymentMethod, str]] = ..., payment_method_data: _Optional[_Union[PaymentMethodData, _Mapping]] = ..., connector_customer: _Optional[str] = ..., address: _Optional[_Union[PaymentAddress, _Mapping]] = ..., auth_type: _Optional[_Union[AuthenticationType, str]] = ..., connector_meta_data: _Optional[bytes] = ..., access_token: _Optional[_Union[AccessToken, _Mapping]] = ..., session_token: _Optional[str] = ..., payment_method_token: _Optional[_Union[PaymentMethodToken, _Mapping]] = ..., connector_request_reference_id: _Optional[str] = ..., order_tax_amount: _Optional[int] = ..., email: _Optional[str] = ..., customer_name: _Optional[str] = ..., capture_method: _Optional[_Union[CaptureMethod, str]] = ..., return_url: _Optional[str] = ..., webhook_url: _Optional[str] = ..., complete_authorize_url: _Optional[str] = ..., setup_future_usage: _Optional[_Union[FutureUsage, str]] = ..., off_session: bool = ..., customer_acceptance: _Optional[_Union[CustomerAcceptance, _Mapping]] = ..., browser_info: _Optional[_Union[BrowserInformation, _Mapping]] = ..., order_category: _Optional[str] = ..., enrolled_for_3ds: bool = ..., payment_experience: _Optional[_Union[PaymentExperience, str]] = ..., payment_method_type: _Optional[_Union[PaymentMethodType, str]] = ..., request_incremental_authorization: bool = ..., authentication_data: _Optional[_Union[AuthenticationData, _Mapping]] = ..., request_extended_authorization: bool = ..., minor_amount: _Optional[int] = ..., merchant_order_reference_id: _Optional[str] = ..., shipping_cost: _Optional[int] = ...) -> None: ...

class PaymentsAuthorizeResponse(_message.Message):
    __slots__ = ("resource_id", "redirection_data", "mandate_reference", "network_txn_id", "connector_response_reference_id", "incremental_authorization_allowed", "status", "error_code", "error_message")
    RESOURCE_ID_FIELD_NUMBER: _ClassVar[int]
    REDIRECTION_DATA_FIELD_NUMBER: _ClassVar[int]
    MANDATE_REFERENCE_FIELD_NUMBER: _ClassVar[int]
    NETWORK_TXN_ID_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_RESPONSE_REFERENCE_ID_FIELD_NUMBER: _ClassVar[int]
    INCREMENTAL_AUTHORIZATION_ALLOWED_FIELD_NUMBER: _ClassVar[int]
    STATUS_FIELD_NUMBER: _ClassVar[int]
    ERROR_CODE_FIELD_NUMBER: _ClassVar[int]
    ERROR_MESSAGE_FIELD_NUMBER: _ClassVar[int]
    resource_id: ResponseId
    redirection_data: RedirectForm
    mandate_reference: MandateReference
    network_txn_id: str
    connector_response_reference_id: str
    incremental_authorization_allowed: bool
    status: AttemptStatus
    error_code: str
    error_message: str
    def __init__(self, resource_id: _Optional[_Union[ResponseId, _Mapping]] = ..., redirection_data: _Optional[_Union[RedirectForm, _Mapping]] = ..., mandate_reference: _Optional[_Union[MandateReference, _Mapping]] = ..., network_txn_id: _Optional[str] = ..., connector_response_reference_id: _Optional[str] = ..., incremental_authorization_allowed: bool = ..., status: _Optional[_Union[AttemptStatus, str]] = ..., error_code: _Optional[str] = ..., error_message: _Optional[str] = ...) -> None: ...

class PaymentsSyncRequest(_message.Message):
    __slots__ = ("resource_id", "connector_request_reference_id")
    RESOURCE_ID_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_REQUEST_REFERENCE_ID_FIELD_NUMBER: _ClassVar[int]
    resource_id: str
    connector_request_reference_id: str
    def __init__(self, resource_id: _Optional[str] = ..., connector_request_reference_id: _Optional[str] = ...) -> None: ...

class PaymentsSyncResponse(_message.Message):
    __slots__ = ("resource_id", "status", "mandate_reference", "network_txn_id", "connector_response_reference_id", "error_code", "error_message")
    RESOURCE_ID_FIELD_NUMBER: _ClassVar[int]
    STATUS_FIELD_NUMBER: _ClassVar[int]
    MANDATE_REFERENCE_FIELD_NUMBER: _ClassVar[int]
    NETWORK_TXN_ID_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_RESPONSE_REFERENCE_ID_FIELD_NUMBER: _ClassVar[int]
    ERROR_CODE_FIELD_NUMBER: _ClassVar[int]
    ERROR_MESSAGE_FIELD_NUMBER: _ClassVar[int]
    resource_id: ResponseId
    status: AttemptStatus
    mandate_reference: MandateReference
    network_txn_id: str
    connector_response_reference_id: str
    error_code: str
    error_message: str
    def __init__(self, resource_id: _Optional[_Union[ResponseId, _Mapping]] = ..., status: _Optional[_Union[AttemptStatus, str]] = ..., mandate_reference: _Optional[_Union[MandateReference, _Mapping]] = ..., network_txn_id: _Optional[str] = ..., connector_response_reference_id: _Optional[str] = ..., error_code: _Optional[str] = ..., error_message: _Optional[str] = ...) -> None: ...

class RefundsSyncRequest(_message.Message):
    __slots__ = ("connector_refund_id", "connector_transaction_id", "refund_reason")
    CONNECTOR_REFUND_ID_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_TRANSACTION_ID_FIELD_NUMBER: _ClassVar[int]
    REFUND_REASON_FIELD_NUMBER: _ClassVar[int]
    connector_refund_id: str
    connector_transaction_id: str
    refund_reason: str
    def __init__(self, connector_refund_id: _Optional[str] = ..., connector_transaction_id: _Optional[str] = ..., refund_reason: _Optional[str] = ...) -> None: ...

class RefundsSyncResponse(_message.Message):
    __slots__ = ("connector_refund_id", "status", "connector_response_reference_id", "error_code", "error_message")
    CONNECTOR_REFUND_ID_FIELD_NUMBER: _ClassVar[int]
    STATUS_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_RESPONSE_REFERENCE_ID_FIELD_NUMBER: _ClassVar[int]
    ERROR_CODE_FIELD_NUMBER: _ClassVar[int]
    ERROR_MESSAGE_FIELD_NUMBER: _ClassVar[int]
    connector_refund_id: str
    status: RefundStatus
    connector_response_reference_id: str
    error_code: str
    error_message: str
    def __init__(self, connector_refund_id: _Optional[str] = ..., status: _Optional[_Union[RefundStatus, str]] = ..., connector_response_reference_id: _Optional[str] = ..., error_code: _Optional[str] = ..., error_message: _Optional[str] = ...) -> None: ...

class PaymentsVoidRequest(_message.Message):
    __slots__ = ("connector_request_reference_id", "cancellation_reason")
    CONNECTOR_REQUEST_REFERENCE_ID_FIELD_NUMBER: _ClassVar[int]
    CANCELLATION_REASON_FIELD_NUMBER: _ClassVar[int]
    connector_request_reference_id: str
    cancellation_reason: str
    def __init__(self, connector_request_reference_id: _Optional[str] = ..., cancellation_reason: _Optional[str] = ...) -> None: ...

class PaymentsVoidResponse(_message.Message):
    __slots__ = ("resource_id", "connector_response_reference_id", "status", "error_code", "error_message")
    RESOURCE_ID_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_RESPONSE_REFERENCE_ID_FIELD_NUMBER: _ClassVar[int]
    STATUS_FIELD_NUMBER: _ClassVar[int]
    ERROR_CODE_FIELD_NUMBER: _ClassVar[int]
    ERROR_MESSAGE_FIELD_NUMBER: _ClassVar[int]
    resource_id: ResponseId
    connector_response_reference_id: str
    status: AttemptStatus
    error_code: str
    error_message: str
    def __init__(self, resource_id: _Optional[_Union[ResponseId, _Mapping]] = ..., connector_response_reference_id: _Optional[str] = ..., status: _Optional[_Union[AttemptStatus, str]] = ..., error_code: _Optional[str] = ..., error_message: _Optional[str] = ...) -> None: ...

class IncomingWebhookRequest(_message.Message):
    __slots__ = ("request_details", "webhook_secrets")
    REQUEST_DETAILS_FIELD_NUMBER: _ClassVar[int]
    WEBHOOK_SECRETS_FIELD_NUMBER: _ClassVar[int]
    request_details: RequestDetails
    webhook_secrets: ConnectorWebhookSecrets
    def __init__(self, request_details: _Optional[_Union[RequestDetails, _Mapping]] = ..., webhook_secrets: _Optional[_Union[ConnectorWebhookSecrets, _Mapping]] = ...) -> None: ...

class IncomingWebhookResponse(_message.Message):
    __slots__ = ("event_type", "content", "source_verified")
    EVENT_TYPE_FIELD_NUMBER: _ClassVar[int]
    CONTENT_FIELD_NUMBER: _ClassVar[int]
    SOURCE_VERIFIED_FIELD_NUMBER: _ClassVar[int]
    event_type: EventType
    content: WebhookResponseContent
    source_verified: bool
    def __init__(self, event_type: _Optional[_Union[EventType, str]] = ..., content: _Optional[_Union[WebhookResponseContent, _Mapping]] = ..., source_verified: bool = ...) -> None: ...

class WebhookResponseContent(_message.Message):
    __slots__ = ("payments_response", "refunds_response")
    PAYMENTS_RESPONSE_FIELD_NUMBER: _ClassVar[int]
    REFUNDS_RESPONSE_FIELD_NUMBER: _ClassVar[int]
    payments_response: PaymentsSyncResponse
    refunds_response: RefundsSyncResponse
    def __init__(self, payments_response: _Optional[_Union[PaymentsSyncResponse, _Mapping]] = ..., refunds_response: _Optional[_Union[RefundsSyncResponse, _Mapping]] = ...) -> None: ...

class RequestDetails(_message.Message):
    __slots__ = ("method", "uri", "headers", "body", "query_params")
    class HeadersEntry(_message.Message):
        __slots__ = ("key", "value")
        KEY_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        key: str
        value: str
        def __init__(self, key: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...
    METHOD_FIELD_NUMBER: _ClassVar[int]
    URI_FIELD_NUMBER: _ClassVar[int]
    HEADERS_FIELD_NUMBER: _ClassVar[int]
    BODY_FIELD_NUMBER: _ClassVar[int]
    QUERY_PARAMS_FIELD_NUMBER: _ClassVar[int]
    method: Method
    uri: str
    headers: _containers.ScalarMap[str, str]
    body: bytes
    query_params: str
    def __init__(self, method: _Optional[_Union[Method, str]] = ..., uri: _Optional[str] = ..., headers: _Optional[_Mapping[str, str]] = ..., body: _Optional[bytes] = ..., query_params: _Optional[str] = ...) -> None: ...

class ConnectorWebhookSecrets(_message.Message):
    __slots__ = ("secret", "additional_secret")
    SECRET_FIELD_NUMBER: _ClassVar[int]
    ADDITIONAL_SECRET_FIELD_NUMBER: _ClassVar[int]
    secret: str
    additional_secret: str
    def __init__(self, secret: _Optional[str] = ..., additional_secret: _Optional[str] = ...) -> None: ...

class RefundsRequest(_message.Message):
    __slots__ = ("refund_id", "connector_transaction_id", "connector_refund_id", "currency", "payment_amount", "reason", "webhook_url", "refund_amount", "connector_metadata", "refund_connector_metadata", "browser_info", "minor_payment_amount", "minor_refund_amount", "merchant_account_id", "capture_method")
    REFUND_ID_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_TRANSACTION_ID_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_REFUND_ID_FIELD_NUMBER: _ClassVar[int]
    CURRENCY_FIELD_NUMBER: _ClassVar[int]
    PAYMENT_AMOUNT_FIELD_NUMBER: _ClassVar[int]
    REASON_FIELD_NUMBER: _ClassVar[int]
    WEBHOOK_URL_FIELD_NUMBER: _ClassVar[int]
    REFUND_AMOUNT_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_METADATA_FIELD_NUMBER: _ClassVar[int]
    REFUND_CONNECTOR_METADATA_FIELD_NUMBER: _ClassVar[int]
    BROWSER_INFO_FIELD_NUMBER: _ClassVar[int]
    MINOR_PAYMENT_AMOUNT_FIELD_NUMBER: _ClassVar[int]
    MINOR_REFUND_AMOUNT_FIELD_NUMBER: _ClassVar[int]
    MERCHANT_ACCOUNT_ID_FIELD_NUMBER: _ClassVar[int]
    CAPTURE_METHOD_FIELD_NUMBER: _ClassVar[int]
    refund_id: str
    connector_transaction_id: str
    connector_refund_id: str
    currency: Currency
    payment_amount: int
    reason: str
    webhook_url: str
    refund_amount: int
    connector_metadata: bytes
    refund_connector_metadata: bytes
    browser_info: BrowserInformation
    minor_payment_amount: int
    minor_refund_amount: int
    merchant_account_id: str
    capture_method: CaptureMethod
    def __init__(self, refund_id: _Optional[str] = ..., connector_transaction_id: _Optional[str] = ..., connector_refund_id: _Optional[str] = ..., currency: _Optional[_Union[Currency, str]] = ..., payment_amount: _Optional[int] = ..., reason: _Optional[str] = ..., webhook_url: _Optional[str] = ..., refund_amount: _Optional[int] = ..., connector_metadata: _Optional[bytes] = ..., refund_connector_metadata: _Optional[bytes] = ..., browser_info: _Optional[_Union[BrowserInformation, _Mapping]] = ..., minor_payment_amount: _Optional[int] = ..., minor_refund_amount: _Optional[int] = ..., merchant_account_id: _Optional[str] = ..., capture_method: _Optional[_Union[CaptureMethod, str]] = ...) -> None: ...

class RefundsResponse(_message.Message):
    __slots__ = ("connector_refund_id", "refund_status", "error_code", "error_message")
    CONNECTOR_REFUND_ID_FIELD_NUMBER: _ClassVar[int]
    REFUND_STATUS_FIELD_NUMBER: _ClassVar[int]
    ERROR_CODE_FIELD_NUMBER: _ClassVar[int]
    ERROR_MESSAGE_FIELD_NUMBER: _ClassVar[int]
    connector_refund_id: str
    refund_status: RefundStatus
    error_code: str
    error_message: str
    def __init__(self, connector_refund_id: _Optional[str] = ..., refund_status: _Optional[_Union[RefundStatus, str]] = ..., error_code: _Optional[str] = ..., error_message: _Optional[str] = ...) -> None: ...

class ResponseId(_message.Message):
    __slots__ = ("connector_transaction_id", "encoded_data", "no_response_id")
    CONNECTOR_TRANSACTION_ID_FIELD_NUMBER: _ClassVar[int]
    ENCODED_DATA_FIELD_NUMBER: _ClassVar[int]
    NO_RESPONSE_ID_FIELD_NUMBER: _ClassVar[int]
    connector_transaction_id: str
    encoded_data: str
    no_response_id: bool
    def __init__(self, connector_transaction_id: _Optional[str] = ..., encoded_data: _Optional[str] = ..., no_response_id: bool = ...) -> None: ...

class RedirectForm(_message.Message):
    __slots__ = ("form", "html")
    FORM_FIELD_NUMBER: _ClassVar[int]
    HTML_FIELD_NUMBER: _ClassVar[int]
    form: FormData
    html: HtmlData
    def __init__(self, form: _Optional[_Union[FormData, _Mapping]] = ..., html: _Optional[_Union[HtmlData, _Mapping]] = ...) -> None: ...

class FormData(_message.Message):
    __slots__ = ("endpoint", "method", "form_fields")
    class FormFieldsEntry(_message.Message):
        __slots__ = ("key", "value")
        KEY_FIELD_NUMBER: _ClassVar[int]
        VALUE_FIELD_NUMBER: _ClassVar[int]
        key: str
        value: str
        def __init__(self, key: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...
    ENDPOINT_FIELD_NUMBER: _ClassVar[int]
    METHOD_FIELD_NUMBER: _ClassVar[int]
    FORM_FIELDS_FIELD_NUMBER: _ClassVar[int]
    endpoint: str
    method: Method
    form_fields: _containers.ScalarMap[str, str]
    def __init__(self, endpoint: _Optional[str] = ..., method: _Optional[_Union[Method, str]] = ..., form_fields: _Optional[_Mapping[str, str]] = ...) -> None: ...

class HtmlData(_message.Message):
    __slots__ = ("html_data",)
    HTML_DATA_FIELD_NUMBER: _ClassVar[int]
    html_data: str
    def __init__(self, html_data: _Optional[str] = ...) -> None: ...

class MandateReference(_message.Message):
    __slots__ = ("connector_mandate_id",)
    CONNECTOR_MANDATE_ID_FIELD_NUMBER: _ClassVar[int]
    connector_mandate_id: str
    def __init__(self, connector_mandate_id: _Optional[str] = ...) -> None: ...

class CustomerAcceptance(_message.Message):
    __slots__ = ("acceptance_type", "accepted_at", "online")
    ACCEPTANCE_TYPE_FIELD_NUMBER: _ClassVar[int]
    ACCEPTED_AT_FIELD_NUMBER: _ClassVar[int]
    ONLINE_FIELD_NUMBER: _ClassVar[int]
    acceptance_type: AcceptanceType
    accepted_at: str
    online: OnlineMandate
    def __init__(self, acceptance_type: _Optional[_Union[AcceptanceType, str]] = ..., accepted_at: _Optional[str] = ..., online: _Optional[_Union[OnlineMandate, _Mapping]] = ...) -> None: ...

class BrowserInformation(_message.Message):
    __slots__ = ("color_depth", "java_enabled", "java_script_enabled", "language", "screen_height", "screen_width", "time_zone", "ip_address", "accept_header", "user_agent", "os_type", "os_version", "device_model", "accept_language")
    COLOR_DEPTH_FIELD_NUMBER: _ClassVar[int]
    JAVA_ENABLED_FIELD_NUMBER: _ClassVar[int]
    JAVA_SCRIPT_ENABLED_FIELD_NUMBER: _ClassVar[int]
    LANGUAGE_FIELD_NUMBER: _ClassVar[int]
    SCREEN_HEIGHT_FIELD_NUMBER: _ClassVar[int]
    SCREEN_WIDTH_FIELD_NUMBER: _ClassVar[int]
    TIME_ZONE_FIELD_NUMBER: _ClassVar[int]
    IP_ADDRESS_FIELD_NUMBER: _ClassVar[int]
    ACCEPT_HEADER_FIELD_NUMBER: _ClassVar[int]
    USER_AGENT_FIELD_NUMBER: _ClassVar[int]
    OS_TYPE_FIELD_NUMBER: _ClassVar[int]
    OS_VERSION_FIELD_NUMBER: _ClassVar[int]
    DEVICE_MODEL_FIELD_NUMBER: _ClassVar[int]
    ACCEPT_LANGUAGE_FIELD_NUMBER: _ClassVar[int]
    color_depth: int
    java_enabled: bool
    java_script_enabled: bool
    language: str
    screen_height: int
    screen_width: int
    time_zone: int
    ip_address: str
    accept_header: str
    user_agent: str
    os_type: str
    os_version: str
    device_model: str
    accept_language: str
    def __init__(self, color_depth: _Optional[int] = ..., java_enabled: bool = ..., java_script_enabled: bool = ..., language: _Optional[str] = ..., screen_height: _Optional[int] = ..., screen_width: _Optional[int] = ..., time_zone: _Optional[int] = ..., ip_address: _Optional[str] = ..., accept_header: _Optional[str] = ..., user_agent: _Optional[str] = ..., os_type: _Optional[str] = ..., os_version: _Optional[str] = ..., device_model: _Optional[str] = ..., accept_language: _Optional[str] = ...) -> None: ...

class PaymentMethodData(_message.Message):
    __slots__ = ("card",)
    CARD_FIELD_NUMBER: _ClassVar[int]
    card: Card
    def __init__(self, card: _Optional[_Union[Card, _Mapping]] = ...) -> None: ...

class Card(_message.Message):
    __slots__ = ("card_number", "card_exp_month", "card_exp_year", "card_holder_name", "card_cvc", "card_issuer", "card_network", "card_type", "card_issuing_country", "bank_code", "nick_name")
    CARD_NUMBER_FIELD_NUMBER: _ClassVar[int]
    CARD_EXP_MONTH_FIELD_NUMBER: _ClassVar[int]
    CARD_EXP_YEAR_FIELD_NUMBER: _ClassVar[int]
    CARD_HOLDER_NAME_FIELD_NUMBER: _ClassVar[int]
    CARD_CVC_FIELD_NUMBER: _ClassVar[int]
    CARD_ISSUER_FIELD_NUMBER: _ClassVar[int]
    CARD_NETWORK_FIELD_NUMBER: _ClassVar[int]
    CARD_TYPE_FIELD_NUMBER: _ClassVar[int]
    CARD_ISSUING_COUNTRY_FIELD_NUMBER: _ClassVar[int]
    BANK_CODE_FIELD_NUMBER: _ClassVar[int]
    NICK_NAME_FIELD_NUMBER: _ClassVar[int]
    card_number: str
    card_exp_month: str
    card_exp_year: str
    card_holder_name: str
    card_cvc: str
    card_issuer: str
    card_network: CardNetwork
    card_type: str
    card_issuing_country: str
    bank_code: str
    nick_name: str
    def __init__(self, card_number: _Optional[str] = ..., card_exp_month: _Optional[str] = ..., card_exp_year: _Optional[str] = ..., card_holder_name: _Optional[str] = ..., card_cvc: _Optional[str] = ..., card_issuer: _Optional[str] = ..., card_network: _Optional[_Union[CardNetwork, str]] = ..., card_type: _Optional[str] = ..., card_issuing_country: _Optional[str] = ..., bank_code: _Optional[str] = ..., nick_name: _Optional[str] = ...) -> None: ...

class OnlineMandate(_message.Message):
    __slots__ = ("ip_address", "user_agent")
    IP_ADDRESS_FIELD_NUMBER: _ClassVar[int]
    USER_AGENT_FIELD_NUMBER: _ClassVar[int]
    ip_address: str
    user_agent: str
    def __init__(self, ip_address: _Optional[str] = ..., user_agent: _Optional[str] = ...) -> None: ...

class PhoneDetails(_message.Message):
    __slots__ = ("number", "country_code")
    NUMBER_FIELD_NUMBER: _ClassVar[int]
    COUNTRY_CODE_FIELD_NUMBER: _ClassVar[int]
    number: str
    country_code: str
    def __init__(self, number: _Optional[str] = ..., country_code: _Optional[str] = ...) -> None: ...

class AuthenticationData(_message.Message):
    __slots__ = ("eci", "cavv", "threeds_server_transaction_id", "message_version", "ds_trans_id")
    ECI_FIELD_NUMBER: _ClassVar[int]
    CAVV_FIELD_NUMBER: _ClassVar[int]
    THREEDS_SERVER_TRANSACTION_ID_FIELD_NUMBER: _ClassVar[int]
    MESSAGE_VERSION_FIELD_NUMBER: _ClassVar[int]
    DS_TRANS_ID_FIELD_NUMBER: _ClassVar[int]
    eci: str
    cavv: str
    threeds_server_transaction_id: str
    message_version: str
    ds_trans_id: str
    def __init__(self, eci: _Optional[str] = ..., cavv: _Optional[str] = ..., threeds_server_transaction_id: _Optional[str] = ..., message_version: _Optional[str] = ..., ds_trans_id: _Optional[str] = ...) -> None: ...

class PaymentAddress(_message.Message):
    __slots__ = ("shipping", "billing", "unified_payment_method_billing", "payment_method_billing")
    SHIPPING_FIELD_NUMBER: _ClassVar[int]
    BILLING_FIELD_NUMBER: _ClassVar[int]
    UNIFIED_PAYMENT_METHOD_BILLING_FIELD_NUMBER: _ClassVar[int]
    PAYMENT_METHOD_BILLING_FIELD_NUMBER: _ClassVar[int]
    shipping: Address
    billing: Address
    unified_payment_method_billing: Address
    payment_method_billing: Address
    def __init__(self, shipping: _Optional[_Union[Address, _Mapping]] = ..., billing: _Optional[_Union[Address, _Mapping]] = ..., unified_payment_method_billing: _Optional[_Union[Address, _Mapping]] = ..., payment_method_billing: _Optional[_Union[Address, _Mapping]] = ...) -> None: ...

class Address(_message.Message):
    __slots__ = ("address", "phone", "email")
    ADDRESS_FIELD_NUMBER: _ClassVar[int]
    PHONE_FIELD_NUMBER: _ClassVar[int]
    EMAIL_FIELD_NUMBER: _ClassVar[int]
    address: AddressDetails
    phone: PhoneDetails
    email: str
    def __init__(self, address: _Optional[_Union[AddressDetails, _Mapping]] = ..., phone: _Optional[_Union[PhoneDetails, _Mapping]] = ..., email: _Optional[str] = ...) -> None: ...

class AddressDetails(_message.Message):
    __slots__ = ("city", "country", "line1", "line2", "line3", "zip", "state", "first_name", "last_name")
    CITY_FIELD_NUMBER: _ClassVar[int]
    COUNTRY_FIELD_NUMBER: _ClassVar[int]
    LINE1_FIELD_NUMBER: _ClassVar[int]
    LINE2_FIELD_NUMBER: _ClassVar[int]
    LINE3_FIELD_NUMBER: _ClassVar[int]
    ZIP_FIELD_NUMBER: _ClassVar[int]
    STATE_FIELD_NUMBER: _ClassVar[int]
    FIRST_NAME_FIELD_NUMBER: _ClassVar[int]
    LAST_NAME_FIELD_NUMBER: _ClassVar[int]
    city: str
    country: CountryAlpha2
    line1: str
    line2: str
    line3: str
    zip: str
    state: str
    first_name: str
    last_name: str
    def __init__(self, city: _Optional[str] = ..., country: _Optional[_Union[CountryAlpha2, str]] = ..., line1: _Optional[str] = ..., line2: _Optional[str] = ..., line3: _Optional[str] = ..., zip: _Optional[str] = ..., state: _Optional[str] = ..., first_name: _Optional[str] = ..., last_name: _Optional[str] = ...) -> None: ...

class AccessToken(_message.Message):
    __slots__ = ("token", "expires")
    TOKEN_FIELD_NUMBER: _ClassVar[int]
    EXPIRES_FIELD_NUMBER: _ClassVar[int]
    token: str
    expires: int
    def __init__(self, token: _Optional[str] = ..., expires: _Optional[int] = ...) -> None: ...

class PaymentMethodToken(_message.Message):
    __slots__ = ("token",)
    TOKEN_FIELD_NUMBER: _ClassVar[int]
    token: str
    def __init__(self, token: _Optional[str] = ...) -> None: ...

class MultipleCaptureRequestData(_message.Message):
    __slots__ = ("capture_sequence", "capture_reference")
    CAPTURE_SEQUENCE_FIELD_NUMBER: _ClassVar[int]
    CAPTURE_REFERENCE_FIELD_NUMBER: _ClassVar[int]
    capture_sequence: int
    capture_reference: str
    def __init__(self, capture_sequence: _Optional[int] = ..., capture_reference: _Optional[str] = ...) -> None: ...

class PaymentsCaptureRequest(_message.Message):
    __slots__ = ("connector_transaction_id", "amount_to_capture", "currency", "multiple_capture_data", "connector_meta_data")
    CONNECTOR_TRANSACTION_ID_FIELD_NUMBER: _ClassVar[int]
    AMOUNT_TO_CAPTURE_FIELD_NUMBER: _ClassVar[int]
    CURRENCY_FIELD_NUMBER: _ClassVar[int]
    MULTIPLE_CAPTURE_DATA_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_META_DATA_FIELD_NUMBER: _ClassVar[int]
    connector_transaction_id: str
    amount_to_capture: int
    currency: Currency
    multiple_capture_data: MultipleCaptureRequestData
    connector_meta_data: bytes
    def __init__(self, connector_transaction_id: _Optional[str] = ..., amount_to_capture: _Optional[int] = ..., currency: _Optional[_Union[Currency, str]] = ..., multiple_capture_data: _Optional[_Union[MultipleCaptureRequestData, _Mapping]] = ..., connector_meta_data: _Optional[bytes] = ...) -> None: ...

class PaymentsCaptureResponse(_message.Message):
    __slots__ = ("resource_id", "connector_response_reference_id", "status", "error_code", "error_message")
    RESOURCE_ID_FIELD_NUMBER: _ClassVar[int]
    CONNECTOR_RESPONSE_REFERENCE_ID_FIELD_NUMBER: _ClassVar[int]
    STATUS_FIELD_NUMBER: _ClassVar[int]
    ERROR_CODE_FIELD_NUMBER: _ClassVar[int]
    ERROR_MESSAGE_FIELD_NUMBER: _ClassVar[int]
    resource_id: ResponseId
    connector_response_reference_id: str
    status: AttemptStatus
    error_code: str
    error_message: str
    def __init__(self, resource_id: _Optional[_Union[ResponseId, _Mapping]] = ..., connector_response_reference_id: _Optional[str] = ..., status: _Optional[_Union[AttemptStatus, str]] = ..., error_code: _Optional[str] = ..., error_message: _Optional[str] = ...) -> None: ...
